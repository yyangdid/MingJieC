* 第 1 章：初识C语言
** 1-1：显示计算结果
*** 计算整数的和并显示结果
+ *list 1-1:* 计算整数 15 和 37 的和，并显示计算结果
  #+attr_html: :width 234px
  [[file:images/10101.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0101.c
// Description : 计算整数 15 和 37 的和，并显示计算结果

#include <stdio.h>

int main (void)
{
  printf("%d", 15+37);

  return 0;
}
#+end_src
*** 计算并显示整数的差
+ *list 1-2:* 计算并显示 15 减去 37 的差
  #+attr_html: :width 234px
  [[file:images/10102.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0102.c
// Description : 计算并显示 15 减去 37 的差

#include <stdio.h>

int main (void)
{
  printf("%d", 15-37);

  return 0;
}
#+end_src
*** 格式化字符串和转换说明
+ *list 1-3:* 人性化的显示 15 与 37 的和
  #+attr_html: :width 238px
  [[file:images/10103.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0103.c
// Description : 人性化的显示 15 与 37 的和

#include <stdio.h>

int main (void)
{
  printf("15 与 37 的和是 %d。\n", 15+37);

  return 0;
}
#+end_src
+ *ex 1-1:* 编写一段程序，计算出 15 减去 37 的结果，并以 “15 减去 37 的结果是 -22。” 的格式进行显示。
  #+attr_html: :width 238px
  [[file:images/10104.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0101.c
// Description : 编写一段程序，计算出 15 减去 37 的结果，并以 “15 减去 37 的结果是 -22。” 的格式进行显示。

#include <stdio.h>

int main (void)
{
  printf("15 减去 37 的结果是 %d。\n", 15-37);

  return 0;
}
#+end_src
*** 无格式化输出
+ *list 1-4:* 打招呼进行自我介绍
  #+attr_html: :width 238px
  [[file:images/10105.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0104.c
// Description : 打招呼进行自我介绍

#include <stdio.h>

int main (void)
{
  printf("您好！我叫柴田望洋。\n");

  return 0;
}
#+end_src
+ *list 1-5:* 打招呼进行自我介绍（打招呼和自我介绍分行显示・其 1）
  #+attr_html: :width 238px
  [[file:images/10106.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0105.c
// Description : 打招呼进行自我介绍（打招呼和自我介绍分行显示・其 1）

#include <stdio.h>

int main (void)
{
  printf("您好！\n我叫柴田望洋。\n");

  return 0;
}
#+end_src
+ *list 1-6:* 打招呼进行自我介绍（打招呼和自我介绍分行显示・其 2）
  #+attr_html: :width 238px
  [[file:images/10106.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0106.c
// Description : 打招呼进行自我介绍（打招呼和自我介绍分行显示・其 2）

#include <stdio.h>

int main (void)
{
  printf("您好！\n");
  printf("我叫柴田望洋。\n");

  return 0;
}
#+end_src
*** 转义字符
+ *list 1-7:* 打招呼并响铃 3 次
  #+attr_html: :width 238px
  [[file:images/10107.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0107.c
// Description : 打招呼并响铃 3 次

#include <stdio.h>

int main (void)
{
  printf("您好！\a\a\a\n");

  return 0;
}
#+end_src
+ *ex 1-2:* 编写一段程序，调用一次 printf 函数，显示下图内容：
  #+attr_html: :width 238px
  [[file:images/10108.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0102.c
// Description : 编写一段程序，调用一次 printf 函数，显示下图内容：

#include <stdio.h>

int main (void)
{
  printf("天\n地\n人\n");

  return 0;
}
#+end_src
+ *ex 1-3:* 编写一段程序，调用一次 printf 函数，显示下图内容：
  #+attr_html: :width 238px
  [[file:images/10109.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0103.c
// Description : 编写一段程序，调用一次 printf 函数，显示下图内容：

#include <stdio.h>

int main (void)
{
  printf("喂！\n\n您好！\n再见。\n");

  return 0;
}
#+end_src
** 1-2：变量
*** 变量和声明
+ *list 1-8:* 为两个变量赋值并显示
  #+attr_html: :width 238px
  [[file:images/10110.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0108.c
// Description : 为两个变量赋值并显示

#include <stdio.h>

int main (void)
{
  int vx, vy;                     // vx 和 vy 是 int 类型的变量

  vx = 57;                        // 把 57 赋给 vx
  vy = vx+10;                     // 把 vx+10 赋给 vy

  printf("vx 的值是 %d。\n", vx); // 显示 vx 的值
  printf("vy 的值是 %d。\n", vy); // 显示 vy 的值

  return 0;
}
#+end_src
*** 初始化
+ *list 1-9:* 在不为两个变量赋值的情况下显示
  #+attr_html: :width 238px
  [[file:images/10111.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0109.c
// Description : 在不为两个变量赋值的情况下显示

#include <stdio.h>

int main (void)
{
  int vx, vy;                     // vx 和 vy 都是 int 类型的变量

  printf("vx 的值是 %d。\n", vx); // 显示 vx 的值
  printf("vy 的值是 %d。\n", vy); // 显示 vy 的值

  return 0;
}
#+end_src
*** 声明时初始化
+ *list 1-10:* 对两个变量进行初始化并显示
  #+attr_html: :width 238px
  [[file:images/10112.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0110.c
// Description : 对两个变量进行初始化并显示

#include <stdio.h>

int main (void)
{
  int vx = 57;                    // vx 是 int 类型的变量（初始化为 57）
  int vy = vx+10;                 // vy 是 int 类型的变量（初始化为 vx+10）

  printf("vx 的值是 %d。\n", vx); // 显示 vx 的值
  printf("vy 的值是 %d。\n", vy); // 显示 vy 的值

  return 0;
}
#+end_src
*** 初始化和赋值
+ *ex 1-4:* 如果在 int 类型变量的声明中为变量赋一个实数值的初始值（如 3.14 或 5.7 等）会怎样呢？请试着生成并确认。
  #+attr_html: :width 238px
  [[file:images/10113.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0104.c
// Description : 如果在 int 类型变量的声明中为变量赋一个实数值的初始值（如 3.14 或 5.7 等）会怎样呢？请试着生成并确认。

#include <stdio.h>

int main (void)
{
  int vx = 3.14;                  // vx 是 int 类型的变量（初始化为实数 3.14）
  int vy = 5.7;                   // vy 是 int 类型的变量（初始化为实数 5.7）

  printf("vx 的值是 %d。\n", vx); // 显示 vx 的值
  printf("vy 的值是 %d。\n", vy); // 显示 vy 的值

  return 0;
}

// 编译会报两个 warning
// 输出的值：vx 为 3，vy 为 5
#+end_src
** 1-3：输入和显示
*** 通过键盘进行输入
+ *list 1-11:* 显示并确认输入的整数值
  #+attr_html: :width 238px
  [[file:images/10114.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0111.c
// Description : 显示并确认输入的整数值

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);             // 读取整数值

  printf("您输入的是 %d。\n", no);

  return 0;
}
#+end_src
*** 乘法运算
+ *list 1-12:* 读取一个整数并显示其 5 倍数的值
  #+attr_html: :width 238px
  [[file:images/10115.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0112.c
// Description : 读取一个整数并显示其 5 倍数的值

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);             // 读取整数值

  printf("%d 的 5 倍数是 %d。\n", no, 5*no);

  return 0;
}
#+end_src
+ *ex 1-5:* 编写一段程序，像下图那样读取一个整数并显示该整数加上 12 之后的结果。
  #+attr_html: :width 238px
  [[file:images/10116.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0105.c
// Description : 编写一段程序，像下图那样读取一个整数并显示该整数加上 12 之后的结果。

#include <stdio.h>

int main (void)
{
  int vx;

  printf("请输入一个整数：");
  scanf("%d", &vx);

  printf("该整数加上 12 的结果是 %d。\n", vx+12);

  return 0;
}
#+end_src
+ *ex 1-6:* 编写一段程序，像下图那样读取一个整数并显示该整数减去 6 之后的结果。
  #+attr_html: :width 238px
  [[file:images/10117.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0106.c
// Description : 编写一段程序，像下图那样读取一个整数并显示该整数减去 6 之后的结果。

#include <stdio.h>

int main (void)
{
  int vx;

  printf("请输入一个整数：");
  scanf("%d", &vx);

  printf("该整数减去 6 的结果是 %d。\n", vx-6);

  return 0;
}
#+end_src
*** 输出函数 puts
+ *list 1-13:* 显示出读取到的两个整数的和
  #+attr_html: :width 238px
  [[file:images/10118.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0113.c
// Description : 显示出读取到的两个整数的和

#include <stdio.h>

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  printf("它们的和是 %d。\n", n1+n2); // 显示和

  return 0;
}
#+end_src
+ *list 1-14:* 显示出读取到的两个整数的和（使用变量）
  #+attr_html: :width 238px
  [[file:images/10119.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/list0114.c
// Description : 显示出读取到的两个整数的和（使用变量）

#include <stdio.h>

int main (void)
{
  int n1, n2;
  int wa;                          // 和

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  wa = n1+n2;                      // 把 n1 与 n2 的和赋给变量 wa

  printf("它们的和是 %d。\n", wa); // 显示和

  return 0;
}
#+end_src
+ *ex 1-7:* 编写一段程序，使其显示 “天” “地” “人”，如下图。注意用 puts 函数而非 printf 函数来进行显示。
  #+attr_html: :width 238px
  [[file:images/10120.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0107.c
// Description : 编写一段程序，使其显示 “天” “地” “人”，如下图。注意用 puts 函数而非 printf 函数来进行显示。

#include <stdio.h>

int main (void)
{
  puts("天");
  puts("地");
  puts("人");

  return 0;
}
#+end_src
+ *ex 1-8:* 编写一段程序，像下图这样显示读取到的两个整数的乘积。
  #+attr_html: :width 238px
  [[file:images/10121.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0108.c
// Description : 编写一段程序，像下图这样显示读取到的两个整数的乘积。

#include <stdio.h>

int main (void)
{
  int vx, vy;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &vx);
  printf("整数 2：");  scanf("%d", &vy);

  printf("它们的乘积是 %d。\n", vx*vy);

  return 0;
}
#+end_src
+ *ex 1-9:* 编写一段程序，像下图这样显示读取到的三个整数的和。
  #+attr_html: :width 238px
  [[file:images/10122.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/ex0109.c
// Description : 编写一段程序，像下图这样显示读取到的三个整数的和。

#include <stdio.h>

int main (void)
{
  int vx, vy, vz;

  puts("请输入三个整数：");
  printf("整数 1：");  scanf("%d", &vx);
  printf("整数 2：");  scanf("%d", &vy);
  printf("整数 3：");  scanf("%d", &vz);

  printf("它们的和是 %d。\n", vx+vy+vz);

  return 0;
}
#+end_src
** 总结
+ *总结：* 求长方形的面积
  #+attr_html: :width 238px
  [[file:images/10123.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap01/summary.c
// Description : 求长方形的面积

#include <stdio.h>

int main (void)
{
  int width;                   // 长方形的长  <----v
  int height;                  // 长方形的宽  <----^---- 变量声明

  puts("求长方形的面积：");    // <--------------------- 显示后换行

  printf("长：");              // <--------------------- 显示后不换行
  scanf("%d", &width);
  //      ^--------------------------------------------- 读取十进制整数
  printf("宽：");
  scanf("%d", &height);
  //          ^----------------------------------------- 注意不要忘记 & 符号
  printf("面积是 %d。\a\n", width * height);
  //                  ^           ^--------------------- 进行乘法运算
  //                  ^--------------------------------- \a 和 \n 分别是表示响铃和换行的转义字符

  return 0;
}
#+end_src
* 第 2 章：运算和数据类型
** 2-1：运算
*** 运算符和操作数
+ *list 2-1:* 读取两个整数的值，然后显示出它们的和、差、积、商和余数
  #+attr_html: :width 238px
  [[file:images/10201.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0201.c
// Description : 读取两个整数的值，然后显示出它们的和、差、积、商和余数

#include <stdio.h>

int main (void)
{
  int vx, vy;

  puts("请输入两个整数：");
  printf("整数 vx：");  scanf("%d", &vx);
  printf("整数 vy：");  scanf("%d", &vy);

  printf("vx + vy = %d\n", vx + vy);
  printf("vx - vy = %d\n", vx - vy);
  printf("vx * vy = %d\n", vx * vy);
  printf("vx / vy = %d\n", vx / vy);
  printf("vx %% vy = %d\n", vx % vy);
  //         ^---------------------- 格式化字符串内如果连续有两个 % 符号，则输出只显示一个。而 puts() 函数会输出两个 %
  return 0;
}
#+end_src
*** 获取整数的最后一位数字
+ *list 2-2:* 显示读取的整数的最后一位数字
  #+attr_html: :width 238px
  [[file:images/10202.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/0202.c
// Description : 显示读取的整数的最后一位数字

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);             // 读取整数的值

  printf("最后一位是 %d。\n", no % 10);

  return 0;
}
#+end_src
*** 多个转换说明
+ *list 2-3:* 读取两个整数，显示它们的商和余数
  #+attr_html: :width 238px
  [[file:images/10203.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/0203.c
// Description : 读取两个整数，显示它们的商和余数

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("a 除以 b 得 %d 余 %d。\n", a/b, a%b);

  return 0;
}
#+end_src
+ *ex 2-1:* 编写一段程序，像下图那样读取两个整数，然后显示出前者是后者的百分之几。
  #+attr_html: :width 238px
  [[file:images/10204.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/ex0201.c
// Description : 编写一段程序，像下图那样读取两个整数，然后显示出前者是后者的百分之几。

#include <stdio.h>

int main (void)
{
  int x, y;

  puts("请输入两个整数：");
  printf("整数 x：");  scanf("%d", &x);
  printf("整数 y：");  scanf("%d", &y);

  printf("x 的值是 y 的 %d%%。\n", x*100/y);

  return 0;
}
#+end_src
+ *ex 2-2:* 编写一段程序，像下图那样读取两个整数，然后输出它们的和以及积。
  #+attr_html: :width 238px
  [[file:images/10205.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/ex0202.c
// Description : 编写一段程序，像下图那样读取两个整数，然后输出它们的和以及积。

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("它们的和是 %d，积是 %d。\n", a+b, a*b);

  return 0;
}
#+end_src
*** 单目运算符
+ *list 2-4:* 对读取的整数值得进行符号取反操作，并输出结果
  #+attr_html: :width 238px
  [[file:images/10206.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0204.c
// Description : 对读取的整数值得进行符号取反操作，并输出结果

#include <stdio.h>

int main (void)
{
  int num;

  printf("请输入一个整数：");
  scanf("%d", &num);                         // 读取整数值

  printf("符号取反之后的值是 %d。\n", -num); // 单目运算符 -

  return 0;
}
#+end_src
** 2-2：数据类型
*** 求平均值
+ *list 2-5:* 读取两个整数，显示出它们的平均值
  #+attr_html: :width 238px
  [[file:images/10207.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0205.c
// Description : 读取两个整数，显示出它们的平均值

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("它们的平均值是 %d。\n", (a+b)/2);

  return 0;
}
#+end_src
*** 数据类型
+ *list 2-6:* 整数和浮点数
  #+attr_html: :width 238px
  [[file:images/10208.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0206.c
// Description : 整数和浮点数

#include <stdio.h>

int main (void)
{
  int    n;                     // 整数
  double x;                     // 浮点数

  n = 9.99;                     // 编译会报 warning
  x = 9.99;

  printf("int    型变量 n 的值：%d\n", n);   // 9
  printf("              n / 2 ：%d\n", n/2); // 9 / 2

  printf("double 型变量 x 的值：%f\n", x);   // 9.99
  printf("              x / 2 ：%f\n", x/2); // 9.99 / 2
  //                             ^------------- double 类型的显示使用 %f，而非 %d。
  return 0;
}
#+end_src
*** double 类型的运算
+ *list 2-7:* 读取两个实数，用实数显示出它们的和、差、积、商
  #+attr_html: :width 238px
  [[file:images/10209.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0207.c
// Description : 读取两个实数，用实数显示出它们的和、差、积、商

#include <stdio.h>

int main (void)
{
  double vx, vy;                // 浮点数

  puts("请输入两个实数：");
  printf("实数 vx：");  scanf("%lf", &vx);
  printf("实数 vy：");  scanf("%lf", &vy);
  //                            ^--- 小写字母 l
  printf("vx + vy = %f\n", vx + vy);
  printf("vx - vy = %f\n", vx - vy);
  printf("vx * vy = %f\n", vx * vy);
  printf("vx / vy = %f\n", vx / vy);

  return 0;
}
#+end_src
+ *ex 2-3:* 编写一段程序，像下图那样显示出读取的实数的值。
  #+attr_html: :width 238px
  [[file:images/10210.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/ex0203.c
// Description : 编写一段程序，像下图那样显示出读取的实数的值。

#include <stdio.h>

int main (void)
{
  double vd;

  printf("请输入一个实数：");
  scanf("%lf,", &vd);

  printf("你输入的是 %f\n", vd);

  return 0;
}
#+end_src
*** 数据类型和运算
+ *list 2-8:* 验证数据类型和运算
  #+attr_html: :width 238px
  [[file:images/10211.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0208.c
// Description : 验证数据类型和运算

#include <stdio.h>

int main (void)
{
  int    n1, n2, n3, n4; // 整数
  double d1, d2, d3, d4; // 浮点型

  n1 = 5    / 2;         // n1  <---  2
  n2 = 5.0  / 2.0;       // n2  <---  2.5 （赋值时舍弃小数点以后的部分）
  n3 = 5.0  / 2;         // n2  <---  2.5 （赋值时舍弃小数点以后的部分）
  n4 = 5    / 2.0;       // n2  <---  2.5 （赋值时舍弃小数点以后的部分）

  d1 = 5    / 2;         // d1  <---  2
  d2 = 5.0  / 2.0;       // d2  <---  2.5
  d3 = 5.0  / 2;         // d3  <---  2.5
  d4 = 5    / 2.0;       // d4  <---  2.5

  printf("n1 = %d\n", n1);
  printf("n2 = %d\n", n2);
  printf("n3 = %d\n", n3);
  printf("n4 = %d\n\n", n4);
  //                ^--------------- 输出空行
  printf("d1 = %f\n", d1);
  printf("d2 = %f\n", d2);
  printf("d3 = %f\n", d3);
  printf("d4 = %f\n", d4);

  return 0;
}
#+end_src
+ *ex 2-4:* 编写程序对整型常量、浮点型常量、int 型变量和 double 型变量进行乘除等各种运算
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/ex0204.c
// Description : 编写程序对整型常量、浮点型常量、int 型变量和 double 型变量进行乘除等各种算运

// 同 chap02/list0208.c
#+end_src
*** 类型转换
+ *list 2-9:* 读取两个整数并用浮点数显示出它们的平均值（自动类型转换）
  #+attr_html: :width 238px
  [[file:images/10212.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0209.c
// Description : 读取两个整数并用浮点数显示出它们的平均值（自动类型转换）

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("它们的平均值是 %f\n", (a+b)/2.0); // 自动类型转换

  return 0;
}
#+end_src
+ *list 2-10:* 读取两个整数并用浮点数显示出它们的平均值（显式类型转换）
  #+attr_html: :width 238px
  [[file:images/10213.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0210.c
// Description : 读取两个整数并用浮点数显示出它们的平均值（显式类型转换）

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("它们的平均值是 %f\n", (double)(a+b)/2); // 显式类型转换

  return 0;
}
#+end_src
+ *ex 2-5:* 编写一段程序，像下图那样读取两个整数的值，计算出前者是后者的百分之几，并用实数输出结果。
  #+attr_html: :width 238px
  [[file:images/10214.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/ex0205.c
// Description : 编写一段程序，像下图那样读取两个整数的值，计算出前者是后者的百分之几，并用实数输出结果。

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("a 是 b 的 %f%%\n", (double)a*100/b);

  return 0;
}
#+end_src
*** 转换说明
+ *list 2-11:* 读取三个整数，并显示出它们的合计值和平均值
  #+attr_html: :width 238px
  [[file:images/10215.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0211.c
// Description : 读取三个整数，并显示出它们的合计值和平均值

#include <stdio.h>

int main (void)
{
  int    a, b, c;
  int    sum;                   // 合计值
  double ave;                   // 平均值

  puts("请输入三个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);
  printf("整数 c：");  scanf("%d", &c);

  sum = a+b+c;
  ave = (double)(a+b+c)/3;               // 显式类型转换

  printf("它们的合计值是 %5d\n", sum);   // 输出 99999 样式
  printf("它们的平均值是 %5.1f\n", ave); // 输出 999.9 样式

  return 0;
}
#+end_src
+ *list 2-12:* 格式化整数和浮点数并显示
  #+attr_html: :width 238px
  [[file:images/10216.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/list0212.c
// Description : 格式化整数和浮点数并显示

#include <stdio.h>

int main (void)
{
  printf("[%d]\n",     123);     // [123]
  printf("[%.4d]\n",   123);     // [0123]
  printf("[%4d]\n",    123);     // [ 123]
  printf("[%04d]\n",   123);     // [0123]
  printf("[%-4d]\n\n", 123);     // [123 ]

  printf("[%d]\n",     12345);   // [12345]
  printf("[%.3d]\n",   12345);   // [12345]
  printf("[%3d]\n",    12345);   // [12345]
  printf("[%03d]\n",   12345);   // [12345]
  printf("[%-3d]\n\n", 12345);   // [12345]

  printf("[%f]\n",      123.13); // [123.130000]
  printf("[%.1f]\n",    123.13); // [123.1]
  printf("[%6.1f]\n\n", 123.13); // [ 123.1]

  printf("[%f]\n",    123.13);   // [123.130000]
  printf("[%.1f]\n",  123.13);   // [123.1]
  printf("[%4.1f]\n", 123.13);   // [123.1]

  return 0;
}
#+end_src
+ *ex 2-6:* 编写一段程序，像下图那样读取表示身高的整数值，显示出标准体重的实数值。
  标准体重根据公式 (身高-100)x0.9 进行计算，所得的结果保留一位小数。
  #+attr_html: :width 238px
  [[file:images/10217.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/ex0206.c
// Description : 编写一段程序，像下图那样读取表示身高的整数值，显示出标准体重的实数值。
//               标准体重根据公式 (身高-100)x0.9 进行计算，所得的结果保留一位小数。

#include <stdio.h>

int main (void)
{
  double height;                // 身高
  double weight;                // 体重

  printf("请输入您的身高（厘米）：");
  scanf("%lf", &height);

  weight = (height - 100) * 0.9;

  printf("您的标准体重是 %.1f 公斤。\n", weight);

  return 0;
}
#+end_src
** 总结
+ *总结：*
  #+attr_html: :width 238px
  [[file:images/10218.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap02/summary.c
// Description : 第 2 章总结

#include <stdio.h>

int main (void)
{
  int a;                        // ---v
  int b;                        // ---^-- int 表示整数

  double r;                     // 半径
  // ^---------------------------- double 表示浮点数（实数）

  printf("整数 a 和 b 的值：");
  scanf("%d%d", &a, &b);          // 输入时使用空格分割多个参数

  printf("a + b = %d\n", a + b);  // 加法运算，双目 + 运算符
  printf("a - b = %d\n", a - b);  // 减法运算，双目 - 运算符
  printf("a * b = %d\n", a * b);  // 乘法运算，双目 * 运算符
  printf("a / b = %d\n", a / b);  // 商：/ 运算符
  printf("a %% b = %d\n", a % b); // 余数：% 运算符

  printf("(a + b)/2 = %d\n", (a + b)/2);        // int/int 的结果是 int
  printf("平均值 = %f\n\n", (double)(a + b)/2); // double/int 的结果是 double
  //                ^-- 小写的 f  ^--- 类型转换表达式
  printf("半径：");
  scanf("%lf", &r);
  //      ^----- 小写的 l 和 f
  printf("半径为 %.3f 的圆的面积是 %.3f。\n", r, 3.14*r*r);
  //                                 ^----- 小数点后显示 3 位

  return 0;
}
#+end_src
* 第 3 章：分支结构程序
** 3-1：if 语句
*** if 语句・其 1
+ *list 3-1:* 输入的整数能被 5 整除吗
  #+attr_html: :width 238px
  [[file:images/10301.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0301.c
// Description : 输入的整数能被 5 整除吗

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d",&no);

  if (no % 5)
    puts("输入的整数不能被 5 整除。"); // no 不能被 5 整除时执行

  return 0;
}
#+end_src
*** 奇数的判定
+ *list 3-2:* 输入的整数是奇数吗
  #+attr_html: :width 238px
  [[file:images/10302.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0302.c
// Description : 输入的整数是奇数吗

#include <stdio.h>

int main (void)
{
  int no;
  printf("请输入一个整数：");
  scanf("%d", &no);

  if (no % 2)
    puts("输入的整数是奇数。");

  return 0;
}
#+end_src
*** if 语句・其 2
+ *list 3-3:* 输入的整数能被 5 整除吗
  #+attr_html: :width 238px
  [[file:images/10303.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0303.c
// Description : 输入的整数能被 5 整除吗

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  if (no % 5)
    puts("该整数不能被 5 整除。"); // <--- no 不能被 5 整除时执行
  else
    puts("该整数能被 5 整除。");   //  <--- no 能被 5 整除时执行

  return 0;
}
#+end_src
*** 奇数・偶数的判断
+ *list 3-4:* 输入的整数是奇数还是偶数
  #+attr_html: :width 238px
  [[file:images/10304.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0304.c
// Description : 输入的整数是奇数还是偶数

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  if (no % 2)
    puts("该整数是奇数。");
  else
    puts("该整数是偶数。");

  return 0;
}
#+end_src
+ *ex 3-1:* 编写一段程序，像下图这样输入两个整数值，如果后者是前者的约数，则显示 “B 是 A 的约数”。
  如果不是，则显示 “B 不是 A 的约数”。
  #+attr_html: :width 238px
  [[file:images/10305.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0301.c
// Description : 编写一段程序，像下图这样输入两个整数值，如果后者是前者的约数，则显示 “B 是 A 的约数”。
//               如果不是，则显示 “B 不是 A 的约数。”

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &a);
  printf("整数 B：");  scanf("%d", &b);

  if (a % b)
    puts("B 不是 A 的约数。");
  else
    puts("B 是 A 的约数。");

  return 0;
}
#+end_src
*** 非 0 的判断
+ *list 3-5:* 输入的整数值是否为 0
  #+attr_html: :width 238px
  [[file:images/10306.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0305.c
// Description : 输入的整数值是否为 0

#include <stdio.h>

int main (void)
{
  int num;

  printf("请输入一个整数：");
  scanf("%d", &num);

  if (num)
    puts("该整数不是 0。");
  else
    puts("该整数是 0。");

  return 0;
}
#+end_src
*** 相等运算符
+ *list 3-6:* 输入的两个整数相等吗
  #+attr_html: :width 238px
  [[file:images/10307.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0306.c
// Description : 输入的两个整数i相等吗

#include <stdio.h>

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 == n2)
    puts("它们相等。");
  else
    puts("它们不相等。");

  return 0;
}
#+end_src
+ *list 3-7:* 输入的两个整数相等吗（其 2）
  #+attr_html: :width 238px
  [[file:images/10307.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0307.c
// Description : 输入的两个整数相等吗（其 2）

#include <stdio.h>

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 != n2)
    puts("它们不相等。");
  else
    puts("它们相等。");

  return 0;
}
#+end_src
*** 余数的判断
+ *list 3-8:* 个位数是 5 吗
  #+attr_html: :width 238px
  [[file:images/10308.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0308.c
// Description : 个位数是 5 吗

#include <stdio.h>

int main (void)
{
  int num;

  printf("请输入一个整数：");
  scanf("%d", &num);

  if ((num%10) == 5)
    puts("该整数的个位数是 5。");
  else
    puts("该整数的个位数不是 5。");

  return 0;
}
#+end_src
*** 关系运算符
+ *list 3-9:* 判断输入的整数的符号
  #+attr_html: :width 238px
  [[file:images/10309.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0309.c
// Description : 判断输入的整数的符号

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  if (no == 0)
    puts("该整数为 0。");
  else if (no > 0)
    puts("该整数为正数。");
  else
    puts("该整数为负数。");

  return 0;
}
#+end_src
*** 嵌套的 if 语句
+ *ex 3-3:* 编写一段程序，像下图这样输入一个整数值，显示出它的绝对值。
  #+attr_html: :width 238px
  [[file:images/10310.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0303.c
// Description : 编写一段程序，像下图这样输入一个整数值，显示出它的绝对值。

#include <stdio.h>

int main (void)
{
  int n;

  printf("请输入一个整数：");
  scanf("%d", &n);

  if (n > 0)
    printf("绝对值是 %d。\n", n);
  else
    printf("绝对值是 %d。\n", -n);

  return 0;
}
#+end_src
+ *ex 3-4:* 编写一段程序，像下图这样输入两个整数，如果两个数值相等，则显示 “A 和 B 相等。”。
  如果 A 大于 B，则显示 “A 大于 B。”。如果 A 小于 B，则显示 “A 小于 B。”。
  #+attr_html: :width 238px
  [[file:images/10311.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0304.c
// Description : 编写一段程序，像下图这样输入两个整数，如果两个数值相等，则显示 “A 和 B 相等。”。
//               如果 A 大于 B，则显示 “A 大于 B。”。如果 A 小于 B，则显示 “A 小于 B。”。

#include <stdio.h>

int main (void)
{
  int a, b;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &a);
  printf("整数 B：");  scanf("%d", &b);

  if (a == b)
    puts("A 等于 B。");
  else if (a > b)
    puts("A 大于 B。");
  else
    puts("A 小于 B。");

  return 0;
}
#+end_src
+ *list 3-10:* 如果输入的整数值为正，则判断该值的奇偶性并显示
  #+attr_html: :width 238px
  [[file:images/10312.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0310.c
// Description : 如果输入的整数值为正，则判断该值的奇偶性并显示

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  if (no > 0)
    if (no%2 == 0)
      puts("该整数为偶数。");
    else
      puts("该整数为奇数。");
  else
    puts("您输入的不是正数。\a");
  //                         ^--- \a 是响铃
  return 0;
}
#+end_src
*** 判断
+ *ex 3-5:* 编写一段程序，确认相等运算符和关系运算符的运算结果是 1 和 0。
*** 计算较大值
+ *list 3-11:* 显示所输入的两个整数中较大的数
  #+attr_html: :width 238px
  [[file:images/10313.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0311.c
// Description : 显示所输入的两个整数中加大的数

#include <stdio.h>

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 > n2)
    printf("较大的数是 %d。\n", n1);
  else
    printf("较大的数是 %d。\n", n2);

  return 0;
}
#+end_src
+ *list 3-12:* 显示所输入的两个整数中较大的数（其 2）
  #+attr_html: :width 238px
  [[file:images/10313.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0312.c
// Description : 显示所输入的两个整数中加大的数（其 2）

#include <stdio.h>

int main (void)
{
  int n1, n2, max;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 > n2)
    max = n1;
  else
    max = n2;

  printf("较大的数是 %d。\n", max);

  return 0;
}
#+end_src
*** 计算三个数的最大值
+ *list 3-13:* 计算所输入的三个整数中的最大值并显示
  #+attr_html: :width 238px
  [[file:images/10314.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0313.c
// Description : 计算所输入的三个整数中的最大值并显示

#include <stdio.h>

int main (void)
{
  int n1, n2, n3, max;

  puts("请输入三个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);
  printf("整数 3：");  scanf("%d", &n3);

  max = n1;
  if (n2 > max) max = n2;
  if (n3 > max) max = n3;

  printf("最大值是 %d。\n", max);

  return 0;
}
#+end_src
*** 条件运算符
+ *list 3-14:* 显示输入的两个整数中较大数（其 3：条件运算符）
  #+attr_html: :width 238px
  [[file:images/10313.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0314.c
// Description : 显示输入的两个整数中较大数（其 3：条件运算符）

#include <stdio.h>

int main (void)
{
  int n1, n2, max;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  max = (n1>n2) ? n1:n2;        // 将较大的值赋给 max

  printf("较大的值是 %d。\n", max);

  return 0;
}
#+end_src
*** 差值计算
+ *list 3-15:* 计算输入的两个整数的差并显示（条件运算符）
  #+attr_html: :width 238px
  [[file:images/10315.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0315.c
// Description : 计算输入的两个整数的差并显示（条件运算符）

#include <stdio.h>

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  printf("它们的差是 %d。\n", (n1>n2) ? n1-n2 : n2-n1);

  return 0;
}
#+end_src
+ *ex 3-6:* 编写一段程序，计算出输入的三个整数中最小值并显示。（注意使用 if 语句）
  #+attr_html: :width 238px
  [[file:images/10316.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0306.c
// Description : 编写一段程序，计算出输入的三个整数中最小值并显示。（注意使用 if 语句）

#include <stdio.h>

int main (void)
{
  int n1, n2, n3, min;

  puts("请输入三个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);
  printf("整数 3：");  scanf("%d", &n3);

  min = n1;

  if (n2 < min) min = n2;
  if (n3 < min) min = n3;

  printf("最小值是 %d。\n", min);

  return 0;
}
#+end_src
+ *ex 3-7:* 编写一段程序，计算出输入的四个整数中的最大值并显示。（注意使用 if 语句）
  #+attr_html: :width 238px
  [[file:images/10317.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0307.c
// Description : 编写一段程序，计算出输入的四个整数中的最大值并显示。（注意使用 if 语句）

#include <stdio.h>

int main (void)
{
  int n1, n2, n3, n4, max;

  puts("请输入四个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);
  printf("整数 3：");  scanf("%d", &n3);
  printf("整数 4：");  scanf("%d", &n4);

  max = n1;

  if (n2 > max) max = n2;
  if (n3 > max) max = n3;
  if (n4 > max) max = n4;

  printf("最大值是 %d。\n", max);

  return 0;
}
#+end_src
+ *ex 3-8:* 使用 if 语句替换 list 3-15(chap03/list0315.c) 中的条件运算，实现同样的功能。
  #+attr_html: :width 238px
  [[file:images/10315.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0308.c
// Description : 计算输入的两个整数的差并显示

#include <stdio.h>

int main (void)
{
  int n1, n2, nx;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 > n2)
    nx = n1 - n2;
  else
    nx = n2 - n1;

  printf("它们的差是 %d。\n", nx);

  return 0;
}
#+end_src
+ *ex 3-9:* 使用条件运算符替换练习 3-6 的程序中的 if 语句，实现同样的功能。
  #+attr_html: :width 238px
  [[file:images/10316.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0309.c
// Description : 编写一段程序，计算出输入的三个整数中最小值并显示。（注意使用条件运算符）

#include <stdio.h>

int main (void)
{
  int n1, n2, n3;

  puts("请输入三个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);
  printf("整数 3：");  scanf("%d", &n3);

  printf("最小值是 %d。\n", (n1<n2) ? ((n1<n3) ? n1 : n3) : ((n2<n3) ? n2 : n3));

  return 0;
}
#+end_src
*** 复合语句（程序块）
+ *list 3-16:* 计算所输入的两个整数中的较大数和较小数并显示
  #+attr_html: :width 238px
  [[file:images/10318.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0316.c
// Description : 计算所输入的两个整数中的较大数和较小数并显示

#include <stdio.h>

int main (void)
{
  int n1, n2, max, min;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 > n2) {
    max = n1;                   // <--- 复合语句：在结构上被看作是单一的语句
    min = n2;
  } else {
    max = n2;                   // <--- 复合语句：在结构上被看作是单一的语句
    min = n1;
  }

  printf("较大的数是 %d。\n", max);
  printf("较小的数是 %d。\n", min);

  return 0;
}
#+end_src
*** 逻辑运算符
+ *list 3-17:* 显示所输入的月份所处的季节
  #+attr_html: :width 238px
  [[file:images/10319.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0317.c
// Description : 显示所输入的月份所处的季节

#include <stdio.h>

int main (void)
{
  int month;

  printf("请输入月份：");
  scanf("%d", &month);

  if (month>=3 && month<=5)
    printf("%d 月是春季。\n", month);
  else if (month>=6 && month<=8)
    printf("%d 月是夏季。\n", month);
  else if (month>=9 && month<=11)
    printf("%d 月是秋季。\n", month);
  else if (month==1 || month==2 || month==12)
    printf("%d  月是冬季。\n", month);
  else
    printf("%d 月不存在！！\a\n", month);

  return 0;
}
#+end_src
*** 短路求值
+ *ex 3-10:* 编写一段程序，像下图这样输入三个整数，如果三个数都相等，则显示 “三个值都相等”。
  如果其中任意两个值相等，则显示 “有两个值相等”。
  如果上述两种情况都不满足，则显示 “三个值各不相同”。
  #+attr_html: :width 238px
  [[file:images/10320.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0310.c
// Description : 编写一段程序，像下图这样输入三个整数，如果三个数都相等，则显示 “三个值都相等”。
//               如果其中任意两个值相等，则显示 “有两个值相等”。
//               如果上述两种情况都不满足，则显示 “三个值各不相同”。

#include <stdio.h>

int main (void)
{
  int a, b, c;

  puts("请输入三个整数：");
  printf("整数 A：");  scanf("%d", &a);
  printf("整数 B：");  scanf("%d", &b);
  printf("整数 C：");  scanf("%d", &c);

  if (a==b && a==c)
    printf("三个值都相等。\n");
  else if (a==b || a==c || b==c )
    printf("有两个值相等。\n");
  else
    printf("三个值各不相同。\n");

  return 0;
}
#+end_src
+ *ex 3-11:* 编写一段程序，像下图这样输入两个整数，如果它们的差值小于等于 10，则显示 “它们的差小于等于 10”。
  否则，显示 “它们的差大于等于 11”。请使用逻辑或运算符。
  #+attr_html: :width 238px
  [[file:images/10321.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0311.c
// Description : 编写一段程序，像下图这样输入两个整数，如果它们的差值小于等于 10，则显示 “它们的差小于等于 10”。
//               否则，显示 “它们的差大于等于 11”。请使用逻辑或运算符。

#include <stdio.h>

int main (void)
{
  int a, b, nx;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &a);
  printf("整数 B：");  scanf("%d", &b);

  if (a > b)
    nx = a - b;
  else
    nx = b - a;

  if (nx<10 || nx==10)
    puts("它们的差小于等于 10。");
  else
    puts("它们的差大于等于 11。");

  return 0;
}
#+end_src
** 3-2：switch 语句
*** switch 语句和 break 语句
+ *list 3-18:* 显示所输入的整数除以 3 的余数
  #+attr_html: :width 238px
  [[file:images/10322.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0318.c
// Description : 显示所输入的整数除以 3 的余数

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  if (no%3 == 0)
    puts("该数能被 3 整除。");
  else if (no%3 == 1)           // 再次执行已经执行过一次的除法
    puts("该数除以 3 的余数是 1。");
  else
    puts("该数除以 3 的余数是 2。");

  return 0;
}
#+end_src
+ *list 3-19:* 显示所输入的整数除以 3 的余数（switch 语句）
  #+attr_html: :width 238px
  [[file:images/10323.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0319.c
// Description : 显示所输入的整数除以 3 的余数（switch 语句）

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  switch (no % 3){
  case 0 : puts("该数能被 3 整除。");        break;
  case 1 : puts("该数除以 3 的余数是 1。");  break;
  case 2 : puts("该数除以 3 的余数是 2。");  break;
  } //^ ^--- 此处的空格可以省略
  //  ^------ 此处的空格不可省略（否则会被认为是 case2）

  return 0;
}
#+end_src
*** 复杂的 switch 语句
+ *list 3-20:* 确认 switch 语句动作的程序
  #+attr_html: :width 238px
  [[file:images/10324.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/list0320.c
// Description : 确认 switch 语句动作的程序

#include <stdio.h>

int main (void)
{
  int sw;

  printf("整数：");
  scanf("%d", &sw);

  switch (sw) {
  case 1  : puts("A"); puts("B");  break;
  case 2  : puts("C");                    // <--v
  case 5  : puts("D");             break; //    v
  case 6  :                               // <--^--- 注意没有 break 语句
  case 7  : puts("E");             break;
  default : puts("F");             break;
  }

  return 0;
}
#+end_src
*** 选择语句
+ *ex 3-12:* 对 list 3-4(chap03/list0304.c) 中的程序进行修改，不使用 if 语句，而是改用 switch 语句来实现。
  (输入的整数是奇数还是偶数)
  #+attr_html: :width 238px
  [[file:images/10304.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0312.c
// Description : 输入的整数是奇数还是偶数（使用 switch 语句）

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  switch (no % 2) {
  case 0  : puts("该整数是偶数。"); break;
  default : puts("该整数是奇数。");
  }

  return 0;
}
#+end_src
+ *ex 3-13:* 对 list 3-17(chap03/list0317.c) 中的程序进行修改，不使用 if 语句，而是改用 switch 语句来实现。
  (显示所输入的月份所处的季节)
  #+attr_html: :width 238px
  [[file:images/10319.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/ex0313.c
// Description : 显示所输入的月份所处的季节（使用 switch 语句）

#include <stdio.h>

int main (void)
{
  int month;

  printf("请输入月份：");
  scanf("%d", &month);

  switch (month) {
  case 1  :
  case 2  :
  case 12 : printf("%d 月是冬季。\n", month); break;
  case 3  :
  case 4  :
  case 5  : printf("%d 月是春季。\n", month); break;
  case 6  :
  case 7  :
  case 8  : printf("%d 月是夏季。\n", month); break;
  case 9  :
  case 10 :
  case 11 : printf("%d 月是秋季。\n", month); break;
  default : printf("%d 月不存在。\n", month);
  }

  return 0;
}
#+end_src
** 总结
+ *总结 1：* 显示所输入的月份所处的季节
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/summary1
// Description : 显示所输入的月份所处的季节

#include <stdio.h>

int main (void)
{
  int month;                    // 月

  printf("请输入月份：");
  scanf("%d", &month);

  if (month<1 || month>12)
    printf("%d 月不存在！\a\n", month);
  else if (month<=2 || month==12)
    printf("%d 月是冬季。", month);
  else if (month >= 9)
    printf("%d 月是秋季。", month);
  else if (month >= 6)
    printf("%d 月是夏季。", month);
  else
    printf("%d 月是春季。", month);

  return 0;
}
#+end_src
+ *总结 2:* 显示数值对应的颜色
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/summary2.c
// Description : 显示数值对应的颜色

#include <stdio.h>

int main (void)
{
  int sw;

  printf("请输入一个整数：");
  scanf("%d", &sw);

  if (sw>=1 && sw<=3) {
    switch (sw) {
    case 1: printf("红色"); break;
    case 2: printf("蓝色"); break;
    case 3: printf("白色"); break;
    }
    printf("\n");
  }

  return 0;
}
#+end_src
+ *总结 3:* 显示所输入的两个整数中较大的数和较小的数
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap03/summary3.c
// Description : 显示所输入的两个整数中较大的数和较小的数

#include <stdio.h>

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  if (n1 > n2) {
    printf("较大的数是 %d。\n", n1);
    printf("它们的差是 %d。\n", n1-n2);
  } else {
    printf("较大的数是 %d。\n", n2);
    printf("它们的差是 %d。\n", n2-n1);
  }

  return 0;
}
#+end_src
* 第 4 章：程序的循环控制
** 4-1：do 语句
*** do 语句
+ *list 4-1:* 输入的整数是奇数还是偶数呢（按照自己的意愿进行循环操作）
  #+attr_html: :width 298px
  [[file:images/10401.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0401.c
// Description : 输入的整数是奇数还是偶数呢（按照自己的意愿进行循环操作）

#include <stdio.h>

int main (void)
{
  int retry;                    // 要继续吗

  do {
    int no;

    printf("请输入一个整数：");
    scanf("%d", &no);

    if (no % 2)
      puts("这个整数是奇数。");
    else
      puts("这个整数是偶数。"); // 和代码 chap03/list0304.c 一样

    printf("要重复一次吗？【Yes···0 / No···9】：");
    scanf("%d", &retry);
  } while (retry == 0);

  return 0;
}
#+end_src
*** 读取一定范围内的值
+ *list 4-2:* 根据读取的整数值显示所出的拳（只接收 0、1、2）
  #+attr_html: :width 378px
  [[file:images/10402.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0402.c
// Description : 根据读取的整数值显示所出的拳（只接收 0、1、2）

#include <stdio.h>

int main (void)
{
  int hand;                     // 出拳

  do {
    printf("请选择出什么拳【0···石头 / 1···剪刀 / 2···布】");
    scanf("%d", &hand);
  } while (hand<0 || hand>2);   // 或者 !(hand>=0 && hand<=2)
  // hand 的值为 0、1、2 中的一个
  printf("你选择了");
  switch (hand) {
  case 0: printf("石头。\n");  break;
  case 1: printf("剪刀。\n");  break;
  case 2: printf("布。\n");    break;
  }

  return 0;
}
#+end_src
*** 求多个整数的和及平均值
+ *list 4-3:* 不停地输入整数，显示其和及平均值
  #+attr_html: :width 270px
  [[file:images/10403.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0403.c
// Description : 不停地输入整数，显示其和及平均值

#include <stdio.h>

int main (void)
{
  int sum = 0;                  // 和
  int cnt = 0;                  // 整数个数
  int retry;                    // 是否继续

  do {
    int t;

    printf("请输入一个整数：");
    scanf("%d", &t);

    sum = sum + t;              // 将 sum 加 t 的结果赋值给 sum (sum 加 t)
    cnt = cnt + 1;              // 将 cnt 加 1 的结果赋值给 cnt (cnt 加 1)

    printf("是否继续？【Yes···0 / No···9】：");
    scanf("%d", &retry);
  } while (retry == 0);

  printf("和为 %d，平均值为 %.2f。\n", sum, (double)sum/cnt);
  //                         ^---小数部分显示两位  ^---类型转换表达式
  return 0;
}
#+end_src
+ *ex 4-1:* list 3-9(chap03/list0309.c) 是判断所输入的整数值的符号的程序，请将其改写为可以将输入显示这一过程循环任意次。
  (判断输入的整数的符号)
  #+attr_html: :width 330px
  [[file:images/10404.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0401.c
// Description : list 3-9(chap03/list0309.c) 是判断所输入的整数值的符号的程序，
//               请将其改写为可以将输入显示这一过程循环任意次。
//               (判断输入的整数的符号)

#include <stdio.h>

int main (void)
{
  int retry;                    // 是否继续

  do {
    int n;

    printf("请输入一个整数：");
    scanf("%d", &n);

    if (n == 0)
      puts("该整数为 0。");
    else if (n > 0)
      puts("该整数为正数。");
    else
      puts("该整数为负数。");

    printf("是否继续进行判断？【Yes···0 / No···9】：");
    scanf("%d", &retry);
  } while (retry == 0);

  return 0;
}
#+end_src
+ *ex 4-2:* 编写一段程序，像下图这样读取两个整数的值，然后计算出它们之间所有整数的和。
  #+attr_html: :width 324px
  [[file:images/10405.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0402.c
// Description : 编写一段程序，像下图这样读取两个整数的值，然后计算出它们之间所有整数的和。

#include <stdio.h>

int main (void)
{
  int a, b, min, max, sum=0;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &a);
  printf("整数 B：");  scanf("%d", &b);

  (a>b) ? ((min=b) && (max=a)) : ((min=a) && (max=b));

  printf("大于等于 %d 小于等于 %d 的所有整数的和是 ", min, max);

  do {
    sum = sum + min;
    min = min + 1;
  } while (min <= max);

  printf("%d。\n", sum);

  return 0;
}
#+end_src
*** 复合赋值运算符
+ *list 4-4:* 不停地输入整数，显示其和及平均值（其 2）（使用复合赋值运算符和后置递增运算符）
  #+attr_html: :width 260px
  [[file:images/10406.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0404.c
// Description : 不停地输入整数，显示其和及平均值（其 2）（使用复合赋值运算符和后置递增运算符）

#include <stdio.h>

int main (void)
{
  int sum = 0;                  // 和
  int cnt = 0;                  // 整数个数
  int retry;                    // 是否继续

  do {
    int t;

    printf("请输入一个整数：");
    scanf("%d", &t);

    sum += t;                   // sum 加 t
    cnt++;                      // cnt 的值递增

    printf("是否继续？<Yes···0 / No···9>：");
    scanf("%d", &retry);
  } while (retry == 0);

  printf("和为 %d，平均值为 %.2f。\n", sum, (double)sum/cnt);

  return 0;
}
#+end_src
** 4-2：while 语句
*** while 语句
+ *list 4-5:* 从输入的整数开始倒数到 0
  #+attr_html: :width 238px
  [[file:images/10407.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0405.c
// Description : 从输入的整数开始倒数到 0

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  while (no >= 0) {
    printf("%d ", no);          // 注意 %d 后面有个空格
    no--;                       // no 的值递减
  }
  printf("\n");                 // 换行

  return 0;
}
#+end_src
+ *ex 4-3:* 对 list 4-5(chap04/list0405.c) 中的程序进行修改，当输入的值为负数的时候不执行换行操作。
  #+attr_html: :width 238px
  [[file:images/10408.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0403.c
// Description : 对 list 4-5(chap04/list0405.c) 中的程序进行修改，当输入的值为负数的时候不执行换行操作。

#include <stdio.h>

int main (void)
{
  int no, nx;

  printf("请输入一个整数：");
  scanf("%d", &no);

  nx = no;

  while (no >= 0) {
    printf("%d ", no);          // 注意 %d 后面有个空格
    no--;                       // no 的值递减
  }

  if (nx >= 0 )
    printf("\n");               // 换行

  return 0;
}
#+end_src
*** 用递减运算符简化程序代码
+ *list 4-6:* 从输入的整数开始倒数到 0 （其2）
  #+attr_html: :width 238px
  [[file:images/10409.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0406.c
// Description : 从输入的整数开始倒数到 0 （其2）

#include <stdio.h>

int main (void)
{
  int no;

  printf("请输入一个正整数：");
  scanf("%d", &no);

  while (no >= 0)
    printf("%d ", no--);         // no 的值在显示之后递减

  printf("\n");                 // 换行

  return 0;
}
#+end_src
+ *ex 4-4:* 对 list 4-6(chap04/list0406.c) 进行修改，使其：递减到 1 而非递减到 0，当输入的值小于 0 时，不进行换行。
  #+attr_html: :width 238px
  [[file:images/10410.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0404.c
// Description : 对 list 4-6(chap04/list0406.c) 进行修改，使其：递减到 1 而非递减到 0，当输入的值小于 0 时，不进行换行。

#include <stdio.h>

int main (void)
{
  int no, nx;

  printf("请输入一个正整数：");
  scanf("%d", &no);

  nx = no;

  while (no > 0)
    printf("%d ", no--);

  if (nx >= 0)
    printf("\n");

  return 0;
}
#+end_src
*** 数据递增
+ *list 4-7:* 递增显示从 0 到输入的正整数为止的各个整数
  #+attr_html: :width 238px
  [[file:images/10411.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0407.c
// Description : 递增显示从 0 到输入的正整数为止的各个整数

#include <stdio.h>

int main (void)
{
  int i, no;

  printf("请输入一个正整数：");
  scanf("%d", &no);

  i = 0;

  while (i <= no)
    printf("%d ", i++);         // i 的值在显示之后递增

  printf("\n");                 // 换行

  return 0;
}
#+end_src
+ *ex 4-5:* 对 list 4-7(chap04/list0407.c) 的程序进行如下修改：从 1 开始递增，输入的值小于 0 的时候不换行。
  #+attr_html: :width 238px
  [[file:images/10412.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0405.c
// Description : 对 list 4-7(chap04/list0407.c) 的程序进行如下修改：从 1 开始递增，输入的值小于 0 的时候不换行。

#include <stdio.h>

int main (void)
{
  int i, no;

  printf("请输入一个正整数：");
  scanf("%d", &no);

  i = 1;

  while (i <= no)
    printf("%d ", i++);

  if (no >= 0)
    printf("\n");

  return 0;
}
#+end_src
+ *ex 4-6:* 编写一段程序，像下图这样按照升序显示出小于输入值的所有正偶数。
  #+attr_html: :width 238px
  [[file:images/10413.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0406.c
// Description : 编写一段程序，像下图这样按照升序显示出小于输入值的所有正偶数。

#include <stdio.h>

int main (void)
{
  int i, no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  i = 2;

  do {
    printf("%d ", i);
    i += 2;
  } while (i < no);

  printf("\n");

  return 0;
}
#+end_src
+ *ex 4-7:* 编写一段程序，像下图这样显示出小于输入的整数的所有 2 的乘方。
  #+attr_html: :width 238px
  [[file:images/10414.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0407.c
// Description : 编写一段程序，像下图这样显示出小于输入的整数的所有 2 的乘方。

#include <stdio.h>

int main (void)
{
  int i, no;

  printf("请输入一个整数：");
  scanf("%d", &no);

  i = 2;

  do {
    printf("%d ", i);
    i *= 2;
  } while (i < no);

  printf("\n");

  return 0;
}
#+end_src
*** 限定次数的循环操作
+ *list 4-8:* 输入一个整数，连续显示出该整数个 *
  #+attr_html: :width 238px
  [[file:images/10415.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0408.c
// Description : 输入一个整数，连续显示出该整数个 *

#include <stdio.h>

int main (void)
{
  int no;

  printf("正整数：");
  scanf("%d", &no);

  while (no-- > 0)
    putchar('*');
  putchar('\n');

  return 0;
}
#+end_src
*** do 语句和 while 语句
+ *ex 4-8:* 改写 list 4-8(输入一个整数，连续显示出该整数个 *) 当输入的值小于 1 时不输出换行符。
  #+attr_html: :width 238px
  [[file:images/10416.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0408.c
// Description : 改写 list 4-8(输入一个整数，连续显示出该整数个 *) 当输入的值小于 1 时不输出换行符。

#include <stdio.h>

int main (void)
{
  int no, nx;

  printf("正整数：");
  scanf("%d", &no);

  nx = no;

  while (no-- > 0)
    putchar('*');

  if (nx >= 1)
    putchar('\n');

  return 0;
}
#+end_src
*** 前置递增运算符和前置递减运算符
+ *list 4-9:* 输入规定个数个整数并显示出它们的合计值和平均值
  #+attr_html: :width 238px
  [[file:images/10417.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0409.c
// Description : 输入规定个数个整数并显示出它们的合计值和平均值

#include <stdio.h>

int main (void)
{
  int i   = 0;
  int sum = 0;                  // 和
  int num, tmp;

  printf("要输入多少个整数：");
  scanf("%d", &num);

  while (i < num) {
    printf("No.%d: ", ++i);       // i 的值递增后显示
    scanf("%d", &tmp);
    sum += tmp;
  }

  printf("合计值：%d。\n", sum);
  printf("平均值：%.2f。\n", (double)sum/num);

  return 0;
}
#+end_src
*** do 语句的显示
+ *ex 4-9:* 编写一段程序，使之像下图这样交替显示+和-，总个数等于所输入的整数值。
  另外，当输入 0 以下的整数时，则什么也不显示。
  #+attr_html: :width 238px
  [[file:images/10418.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0409.c
// Description : 编写一段程序，使之像下图这样交替显示+和-，总个数等于所输入的整数值。
//               另外，当输入 0 以下的整数时，则什么也不显示。

#include <stdio.h>

int main (void)
{
  int i = 0, no;

  printf("正整数：");
  scanf("%d", &no);

  while (++i <= no) {
    if (i % 2)
      putchar('+');
    else
      putchar('-');
  }

  if (no > 0)
    putchar('\n');

  return 0;
}
#+end_src
+ *ex 4-10:* 编写一段程序，使之像下图这样连续显示 *，总个数等于所输入的整数值。
  另外，当输入 0 以下的整数时，则什么也不显示。
  #+attr_html: :width 238px
  [[file:images/10419.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0410.c
// Description : 编写一段程序，使之像下图这样连续显示 *，总个数等于所输入的整数值。
//               另外，当输入 0 以下的整数时，则什么也不显示。

#include <stdio.h>

int main (void)
{
  int i = 0, no;

  printf("正整数：");
  scanf("%d", &no);

  while (++i <= no ) {
    puts("*");
  }

  return 0;
}
#+end_src
*** 逆向显示整数值
+ *list 4-10:* 逆向显示正整数
  #+attr_html: :width 238px
  [[file:images/10420.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0410.c
// Description : 逆向显示正整数

#include <stdio.h>

int main (void)
{
  int no;

  do {                          // do 语句块的作用是将输入的值限定为正整数
    printf("请输入一个正整数：");
    scanf("%d", &no);
    if (no <= 0)
      puts("\a请不要输入非正整数！");
  } while (no <= 0);

  // no 比 0 大时
  printf("该整数逆向显示的结果是：");
  while (no > 0) {
    printf("%d", no%10);        // 显示最后一位数
    no /= 10;                   // 右移一位
  }
  puts("。");

  return 0;
}
#+end_src
+ *ex 4-11:* 对 list 4-10(chap04/list0410) 的程序进行修改，使其像下图这样在显示结果的同时显示输入的整数值。
  #+attr_html: :width 238px
  [[file:images/10421.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0411.c
// Description : 对 list 4-10(chap04/list0410) 的程序进行修改，使其像下图这样在显示结果的同时显示输入的整数值。

#include <stdio.h>

int main (void)
{
  int no;

  do {
    printf("请输入一个正整数：");
    scanf("%d", &no);
    if (no <= 0)
      puts("\a请不要输入非正整数！");
  } while (no <= 0);

  printf("%d 逆向显示的结果是 ", no);

  while (no > 0) {
    printf("%d", no%10);
    no /= 10;
  }
  puts("。");

  return 0;
}
#+end_src
+ *ex 4-12:* 编写一段程序，读取一个正整数，显示其位数。
  注意：list 4-10(chap04/list0410.c) 中 while 语句的循环次数和 no 的位数一致。
  #+attr_html: :width 238px
  [[file:images/10422.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0412.c
// Description : 编写一段程序，读取一个正整数，显示其位数。
//               注意：list 4-10(chap04/list0410.c) 中 while 语句的循环次数和 no 的位数一致。

#include <stdio.h>

int main (void)
{
  int i = 0, no;

  do {
    printf("请输入一个正整数：");
    scanf("%d", &no);
    if (no <= 0)
      puts("\a请不要输入非正整数！");
  } while (no <= 0);

  printf("%d 的位数是 ", no);

  while (no > 0) {
    no /= 10;
    i++;
  }

  printf("%d\n", i);

  return 0;
}
#+end_src
** for 语句
*** for 语句
+ *list 4-11:* 递增显示从 0 到输入的正整数为止的各个整数（使用 for 语句）
  #+attr_html: :width 238px
  [[file:images/10423.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0411.c
// Description : 递增显示从 0 到输入的正整数为止的各个整数（使用 for 语句）

#include <stdio.h>

int main (void)
{
  int i, no;

  printf("请输入一个正整数：");
  scanf("%d", &no);

  for (i=0; i<=no; i++)
    printf("%d ", i);
  putchar('\n');                // 换行

  return 0;
}
#+end_src
*** 使用 for 语句实现固定次数的循环
+ *list 4-12:* 输入一个整数，连续显示出该整数个 *（使用 for 语句）
  #+attr_html: :width 238px
  [[file:images/10424.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0412.c
// Description : 输入一个整数，连续显示出该整数个 *（使用 for 语句）

#include <stdio.h>

int main (void)
{
  int i, no;

  printf("正整数：");
  scanf("%d", &no);

  for (i=1; i<=no; i++)
    putchar('*');
  putchar('\n');

  return 0;
}
#+end_src
+ *list 4-13:* 输入规定个数个整数并显示出它们的合计值和平均值（使用 for 循环）
  #+attr_html: :width 238px
  [[file:images/10425.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0413.c
// Description : 输入规定个数个整数并显示出它们的合计值和平均值（使用 for 循环）

#include <stdio.h>

int main (void)
{
  int i   = 0;
  int sum = 0;                  // 合计值
  int num, tmp;

  printf("输入多少个整数：");
  scanf("%d", &num);

  for (i=0; i<num; i++) {
    printf("No.%d:", i+1);      // i 为 0 时显示 1
    scanf("%d", &tmp);
    sum += tmp;
  }

  printf("合计值：%d\n", sum);
  printf("平均值：%.2f\n", (double)sum/num);

  return 0;
}
#+end_src
+ *ex 4-13:* 编写一段程序，求 1 到 n 的和。n的值从键盘输入。
  #+attr_html: :width 238px
  [[file:images/10426.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0413.c
// Description : 编写一段程序，求 1 到 n 的和。n的值从键盘输入。

#include <stdio.h>

int main (void)
{
  int i, n;
  int sum = 0;

  printf("n 的值：");
  scanf("%d", &n);

  for (i=1; i<=n; i++)
    sum += i;

  printf("1 到 5 的和为 %d。\n", sum);

  return 0;
}
#+end_src
+ *ex 4-14:* 编写一段程序，像下图这样根据输入的整数，循环显示 1234567890，显示的位数和输入的整数值相同。
  #+attr_html: :width 238px
  [[file:images/10427.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0414.c
// Description : 编写一段程序，像下图这样根据输入的整数，循环显示 1234567890，显示的位数和输入的整数值相同。

#include <stdio.h>

int main (void)
{
  int i, n;

  printf("请输入一个整数：");
  scanf("%d", &n);

  for (i=1; i<=n; i++)
    printf("%d", i%10);

  putchar('\n');

  return 0;
}
#+end_src
+ *ex 4-15:* 编写一段程序，像下图这样显示出身高和标准体重的对照表。
  显示的身高范围和间隔由输入的整数值进行控制，标准体重精确到小数点后 2 位。
  #+attr_html: :width 238px
  [[file:images/10428.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0415.c
// Description : 编写一段程序，像下图这样显示出身高和标准体重的对照表。
//               显示的身高范围和间隔由输入的整数值进行控制，标准体重精确到小数点后 2 位。

#include <stdio.h>

int main (void)
{
  int strn, endn, stepn, i;

  printf("开始数值（cm）：");
  scanf("%d", &strn);
  printf("结束数值（cm）：");
  scanf("%d", &endn);
  printf("间隔数值（cm）：");
  scanf("%d", &stepn);

  for (i=strn; i<=endn; i+=stepn)
    printf("%dcm    %.2fkg\n", i, (i-100)*0.9);

  return 0;
}
#+end_src
*** 偶数的枚举
+ *list 4-14:* 显示输入的整数值以下的偶数
  #+attr_html: :width 238px
  [[file:images/10429.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0414.c
// Description : 显示输入的整数值以下的偶数

#include <stdio.h>

int main (void)
{
  int i, n;

  printf("整数值：");
  scanf("%d", &n);

  for (i=2; i<=n; i+=2)
    printf("%d ", i);
  putchar('\n');

  return 0;
}
#+end_src
*** 约数的枚举
+ *list 4-15:* 显示输入的整数值的所有约数
  #+attr_html: :width 238px
  [[file:images/10430.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0415.c
// Description : 显示输入的整数值的所有约数

#include <stdio.h>

int main (void)
{
  int i, n;

  printf("整数值：");
  scanf("%d", &n);

  for (i=1; i <=n; i++)
    if (n%i == 0)               // 约数的判断和显示
      printf("%d ", i);

  putchar('\n');

  return 0;
}
#+end_src
*** 循环语句
+ *ex 4-16:* 编写一段程序，输入一个整数值，显示该整数值以下的所有奇数。
  #+attr_html: :width 238px
  [[file:images/10431.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0416.c
// Description : 编写一段程序，输入一个整数值，显示该整数值以下的所有奇数。

#include <stdio.h>

int main (void)
{
  int i, n;

  printf("整数值：");
  scanf("%d", &n);

  for (i=1; i<=n; i++)
    if (i%2 != 0)
      printf("%d ", i);

  putchar('\n');

  return 0;
}
#+end_src
+ *ex 4-17:* 编写一段程序，像下图这样显示 1 到 n 的整数值的二次方。
  #+attr_html: :width 238px
  [[file:images/10432.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0417.c
// Description : 编写一段程序，像下图这样显示 1 到 n 的整数值的二次方。

#include <stdio.h>

int main (void)
{
  int i, n;

  printf("整数值：");
  scanf("%d", &n);

  for (i=1; i<=n; i++)
    printf("%d 的二次方是 %d\n", i, i*i);

  return 0;
}
#+end_src
+ *ex 4-18:* 编写一段程序，输入一个整数值，显示该整数值个 '*'。每显示 5 个就进行换行。
  #+attr_html: :width 238px
  [[file:images/10433.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0418.c
// Description : 编写一段程序，输入一个整数值，显示该整数值个 '*'。每显示 5 个就进行换行。

#include <stdio.h>

int main (void)
{
  int i, n;

  printf("整数值：");
  scanf("%d", &n);

  for (i=1; i<=n; i++) {
    putchar('*');
    if (i%5 == 0)
      putchar('\n');
  }

  putchar('\n');

  return 0;
}
#+end_src
+ *ex 4-19:* 编写一段程序，对 list 4-15(chap04/list0415.c) 进行修改，
  在显示所输入的整数值的所有约数之后，显示约数的个数。
  #+attr_html: :width 238px
  [[file:images/10434.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0419.c
// Description : 编写一段程序，对 list 4-15(chap04/list0415.c) 进行修改，
//               在显示所输入的整数值的所有约数之后，显示约数的个数。

#include <stdio.h>

int main (void)
{
  int i, n, c = 0;

  printf("整数值：");
  scanf("%d", &n);

  for (i=1; i<=n; i++) {
    if (n%i == 0) {
      printf("%d\n", i);
      c++;
    }
  }
  printf("总共有 %d 个约数。\n", c);

  return 0;
}
#+end_src
** 4-4：多重循环
*** 二重循环
+ *list 4-16:* 显示九九乘法表
  #+attr_html: :width 238px
  [[file:images/10435.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0416.c
// Description : 显示九九乘法表

#include <stdio.h>

int main (void)
{
  int i, j;

  for (i=1; i<=9; i++) {
    for (j=1; j<=9; j++)
      printf("%3d", i*j);
    putchar('\n');
  }

  return 0;
}
#+end_src
*** 显示图形
+ *list 4-17:* 画一个长方形
  #+attr_html: :width 238px
  [[file:images/10436.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0417.c
// Description : 画一个长方形

#include <stdio.h>

int main (void)
{
  int i, j;
  int height, width;

  puts("让我们来画一个长方形。");
  printf("高：");  scanf("%d", &height);
  printf("宽：");  scanf("%d", &width);

  for (i=1; i<=height; i++) {   // 长方形有 height 行
    for (j=1; j<=width; j++)    // 显示 width 个 '*'
      putchar('*');
    putchar('\n');              // 换行
  }

  return 0;
}
#+end_src
+ *list 4-18:* 显示直角在左下方的等腰直角三角形
  #+attr_html: :width 238px
  [[file:images/10437.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0418.c
// Description : 显示指教在左下方的等腰直角三角形

#include <stdio.h>

int main (void)
{
  int i, j, len;

  puts("生成直角在左下方的等腰直角三角形。");
  printf("短边：");
  scanf("%d", &len);

  for (i=1; i<=len; i++) {      // i 行 (i=1, 2, ---, len)
    for (j=1; j<=i; j++)        // 每行显示 j 个 '*'
      putchar('*');
    putchar('\n');              // 换行
  }

  return 0;
}
#+end_src
+ *list 4-19:* 显示直角在右下方的等腰直角三角形
  #+attr_html: :width 238px
  [[file:images/10438.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0419.c
// Description : 显示直角在右下方的等腰直角三角形

#include <stdio.h>

int main (void)
{
  int i, j, len;

  puts("生成直角在右下角的等腰直角三角形。");
  printf("短边：");
  scanf("%d", &len);

  for (i=1; i<=len; i++) {      // i 行 (i=1,2,---,len)
    for (j=1; j<=len-i; j++)    // 每行显示 len-1 个 ' '
      putchar(' ');
    for (j=1; j<=i; j++)        // 每行显示 i 个 '*'
      putchar('*');
    putchar('\n');              // 换行
  }

  return 0;
}
#+end_src
*** 多重循环
+ *list 4-20:* 输入一个整数，显示该整数个 *（循环次数可任意指定）
  #+attr_html: :width 294px
  [[file:images/10439.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0420.c
// Description : 输入一个整数，显示该整数个 *（循环次数可任意指定）

#include <stdio.h>

int main (void)
{
  int retry;

  do {                          // do 语句的结构和 list 4-1(chap04/list0401.c) 相同
    int i, no;

    do {                        // 和 list 4-10(chap04/list0410.c) 相同
      printf("请输入一个正整数：");
      scanf("%d", &no);
      if (no <= 0)
        puts("\a请不要输入非正整数！");
    } while (no <= 0);

    for (i=1; i<=no; i++)       // 和 list 4-12(chap04/list0412.c) 相同
      putchar('*');
    putchar('\n');

    printf("是否继续执行？【Yes···0 / No···9】：");
    scanf("%d", &retry);
  } while (retry == 0);

  return 0;
}
#+end_src
+ *ex 4-20:* 编写一段程序，像下图这样为九九乘法表增加横纵标题。
  #+attr_html: :width 238px
  [[file:images/10440.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0420.c
// Description : 编写一段程序，像下图这样为九九乘法表增加横纵标题。

#include <stdio.h>

int main (void)
{
  int i, j;

  for (i=0; i<=9; i++) {
    if (!i)
      printf("  |");
    else
      printf("%3d", i);
  }
  putchar('\n');

  for (i=0; i<=9; i++)
    printf("---");

  putchar('\n');

  for (i=1; i<=9; i++) {
    printf("%-2d|", i);
    for (j=1; j<=9; j++)
      printf("%3d", i*j);
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 4-21:* 编写一段程序，像下图这样显示以所输入整数为边长的正方形。
  #+attr_html: :width 238px
  [[file:images/10441.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0421.c
// Description : 编写一段程序，像下图这样显示以所输入整数为边长的正方形。

#include <stdio.h>

int main (void)
{
  int i, j, x;

  puts("生成一个正方形");
  printf("正方形有几层：");
  scanf("%d", &x);

  for (i=1; i<=x; i++) {
    for (j=1; j<=x; j++)
      putchar('*');
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 4-22:* 对 list 4-17(chap04/list0417.c) 中的程序进行修改，显示出一个横向较长的长方形。
  （读取两个边的边长，以较小的数作为行数，以较大的数作为列数。）
  #+attr_html: :width 238px
  [[file:images/10442.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0422.c
// Description : 对 list 4-17(chap04/list0417.c) 中的程序进行修改，显示出一个横向较长的长方形。
//               （读取两个边的边长，以较小的数作为行数，以较大的数作为列数。）

#include <stdio.h>

int main (void)
{
  int i, j, x, y, tmp;

  puts("让我们来画一个长方形。");
  printf("一边：");    scanf("%d", &x);
  printf("另一边：");  scanf("%d", &y);

  if (x > y) {
    tmp = x;
    x   = y;
    y   = tmp;
  }

  for (i=1; i<=x; i++) {
    for (j=1; j<=y; j++)
      putchar('*');
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 4-23:* 对 list 4-18(chap04/list0418.c) 和 list 4-19(chap04/list0419.c) 中的程序进行修改，
  分别显示出直角在左上方和右上方的等腰直角三角形（生成两个程序）
  #+attr_html: :width 238px
  [[file:images/10443.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0423.c
// Description : 对 list 4-18(chap04/list0418.c) 和 list 4-19(chap04/list0419.c) 中的程序进行修改，
//               分别显示出直角在左上方和右上方的等腰直角三角形（生成两个程序）

#include <stdio.h>

int main (void)
{
  int i, j, len;

  puts("生成直角在左上方和右上方的等腰直角三角形。");
  printf("短边：");  scanf("%d", &len);

  for (i=1; i<=len; i++) {
    for (j=len; j>=i; j--) {
      putchar('*');
    }
    putchar('\n');
  }

  putchar('\n');

  for (i=1; i<=len; i++) {
    for (j=1; j<=len; j++) {
      if (j<i)
        putchar(' ');
      else
        putchar('*');
    }
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 4-24:* 编写一段程序，输入一个整数，像下图这样显示出输入整数层的金字塔形状。
  提示：第 i 行显示 (i-1)*2 + 1 个 '*'
  #+attr_html: :width 238px
  [[file:images/10444.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0424.c
// Description : 编写一段程序，输入一个整数，像下图这样显示出输入整数层的金字塔形状。
//               提示：第 i 行显示 (i-1)*2 + 1 个 '*'

#include <stdio.h>

int main (void)
{
  int i, j, n;

  puts("让我们来画一个金字塔。");
  printf("金字塔有几层：");  scanf("%d", &n);

  for (i=1; i<=n; i++) {
    for (j=1; j<=n-i; j++)
      putchar(' ');
    for (j=1; j<=(i-1)*2+1; j++)
      putchar('*');
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 4-25:* 编写一段程序，像下图这样显示输入整数层的向下的金字塔形状。第 i 行显示 1%10 的结果。
  #+attr_html: :width 238px
  [[file:images/10445.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/ex0425.c
// Description : 编写一段程序，像下图这样显示输入整数层的向下的金字塔形状。第 i 行显示 1%10 的结果。

#include <stdio.h>

int main (void)
{
  int i, j, n;

  puts("让我们来画一个向下的金字塔。");
  printf("金字塔有几层：");  scanf("%d", &n);

  for (i=1; i<=n; i++) {
    for (j=1; j<i; j++)
      putchar(' ');
    for (j=1; j<=(n-i)*2+1; j++)
      printf("%d", i%10);
    putchar('\n');
  }

  return 0;
}
#+end_src
** 4-5：程序的组成元素和格式
*** 自由的书写格式
+ *list 4-21:* 显示九九乘法表
  #+attr_html: :width 238px
  [[file:images/10446.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/list0421.c
// Description : 显示九九乘表法

#include <stdio.h>

int main (
          ) {int i, j
    ;
  for (i=         1; i<=9; i
         ++) { for (j=1;j
                      <9; j
                      ++) printf("%3d",
                                 i *
                                 j); putchar('\n');
  }


  return 0
    ;
}
#+end_src
** 总结
+ *总结:* chap04/summary.c
  #+attr_html: :width 238px
  [[file:images/10447.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap04/summary.c
// Description :

#include <stdio.h>

int main (void)
{
	int i, j;
	int x, y, z;

	do {
		printf("0~100 的整数值：");
		scanf("%d", &x);
	} while (x<0 || x>100);   // 或使用 !(x>=0 && x<=100)

	y = x;
	z = x;
	while (y >= 0)
		printf("%d %d\n", y--, ++z);

	printf("宽和高为整数面积为 %d"
         "的长方形的边长是：\n", x);
	for (i=1; i<x; i++) {
		if (i*i > x) break;     // break语句
		if (x%i != 0) continue; // continue语句
		printf("%d × %d\n", i, x / i);
	}

	puts("5行7列的星号");
	for (i=1; i<=5; i++) {
		for (j=1; j<=7; j++)
			putchar('*');
		putchar('\n');
	}

	return 0;
}
#+end_src
* 第 5 章：数组
** 5-1: 数组
*** 数组
+ *list 5-1:* 输入 5 名学生的分数并显示出他们的总分和平均分
  #+attr_html: :width 238px
  [[file:images/10501.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0501.c
// Description : 输入 5 名学生的分数并显示出他们的总分和平均分

#include <stdio.h>

int main (void)
{
  int uchida;                   // 内田同学的分数
  int satoh;                    // 佐藤同学的分数
  int sanaka;                   // 佐中同学的分数
  int hiraki;                   // 平木同学的分数
  int masaki;                   // 真崎同学的分数
  int sum = 0;                  // 总分

  printf("请输入 5 名学生的分数。\n");
  printf("1 号：");  scanf("%d", &uchida);  sum += uchida;
  printf("2 号：");  scanf("%d", &satoh);    sum += satoh;
  printf("3 号：");  scanf("%d", &sanaka);   sum += sanaka;
  printf("4 号：");  scanf("%d", &hiraki);   sum += hiraki;
  printf("5 号：");  scanf("%d", &masaki);   sum += masaki;
  //                                            ^--- += 是将左边加上右边的复合赋值运算符
  printf("总  分：%5d\n", sum);
  printf("平均分：%5.1f\n", (double)sum/5);

  return 0;
}
#+end_src
*** 数组的遍历
+ *list 5-2:* 依次把 1、2、3、4、5 赋值给数组的每个元素并显示
  #+attr_html: :width 238px
  [[file:images/10502.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0502.c
// Description : 依次把 1、2、3、4、5 赋值给数组的每个元素并显示

#include <stdio.h>

int main (void)
{                               //         v--- 元素类型为 int 类型，元素个数为 5 的数组。
  int v[5];                     // int[5] 数组

  v[0] = 1;
  v[1] = 2;
  v[2] = 3;
  v[3] = 4;
  v[4] = 5;

  printf("v[0] = %d\n", v[0]);
  printf("v[1] = %d\n", v[1]);
  printf("v[2] = %d\n", v[2]);
  printf("v[3] = %d\n", v[3]);
  printf("v[4] = %d\n", v[4]);

  return 0;
}
#+end_src
+ *list 5-3:* 依次把 1、2、3、4、5 赋值给数组的每个元素并显示（使用 for 语句）
  #+attr_html: :width 238px
  [[file:images/10503.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0503.c
// Description : 依次把 1、2、3、4、5 赋值给数组的每个元素并显示（使用 for 语句）

#include <stdio.h>

int main (void)
{
  int i;
  int v[5];                     // int[5] 数组

  for (i=0; i<5; i++)           // 为数组元素赋值
    v[i] = i+1;

  for (i=0; i<5; i++)           // 显示元素的值
    //               v----------v--- 元素的值
    printf("v[%d] = %d\n", i, v[i]);
  //           ^-----------^-------- 下标
  return 0;
}
#+end_src
+ *list 5-4:* 将数组的全部元素赋值为 0.0 并显示
  #+attr_html: :width 238px
  [[file:images/10504.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0504.c
// Description : 将数组的全部元素赋值为 0.0 并显示

#include <stdio.h>

int main (void)
{
  int i;                        //            v--- 元素类型为 double 型，元素个数为 7 的数组
  double x[7];                  // double[7] 数组

  for (i=0; i<7; i++)           // 为数组元素赋值
    x[i] = 0.0;

  for (i=0; i<7; i++)           // 显示元素的值
    printf("x[%d] = %.1f\n", i, x[i]);
  //                  ^--- 小数点之后显示 1 位
  return 0;
}
#+end_src
+ *ex 5-1:* 对 list 5-3 (chap05/list0503.c) 中的程序进行修改，从头顺次为数组中的元素赋值 0、1、2、3、4。
  #+attr_html: :width 238px
  [[file:images/10505.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0501.c
// Description : 对 list 5-3 (chap05/list0503.c) 中的程序进行修改，从头顺次为数组中的元素赋值 0、1、2、3、4。

#include <stdio.h>

int main (void)
{
  int i;
  int v[5];

  for (i=0; i<5; i++)
    v[i] = i;

  for (i=0; i<5; i++)
    printf("v[%d] = %d\n", i, v[i]);

  return 0;
}
#+end_src
+ *ex 5-2:* 对 list 5-3 (chap05/list0503.c) 中的程序进行修改，从头顺次为数组中的元素赋值 5、4、3、2、1。
  #+attr_html: :width 238px
  [[file:images/10506.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0502.c
// Description : 对 list 5-3 (chap05/list0503.c) 中的程序进行修改，从头顺次为数组中的元素赋值 5、4、3、2、1。

#include <stdio.h>

int main (void)
{
  int i;
  int v[5];

  for (i=0; i<5; i++)
    v[i] = 5-i;

  for (i=0; i<5; i++)
    printf("v[%d] = %d\n", i, v[i]);

  return 0;
}
#+end_src
*** 数组的初始化
+ *list 5-5:* 从头开始依次用 1、2、3、4、5 对数组各元素进行初始化并显示
  #+attr_html: :width 238px
  [[file:images/10507.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0505.c
// Description : 从头开始依次用 1、2、3、4、5 对数组各元素进行初始化并显示

#include <stdio.h>

int main (void)
{
  int i;
  int v[5] = {1, 2, 3, 4, 5};   // 初始化

  for (i=0; i<5; i++)           // 显示元素的值
    printf("v[%d] = %d\n", i, v[i]);

  return 0;
}
#+end_src
*** 数组的复制
+ *list 5-6:* 把数组中的全部元素复制到另一个数组中
  #+attr_html: :width 238px
  [[file:images/10508.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0506.c
// Description : 把数组中的全部元素复制到另一个数中组

#include <stdio.h>

int main (void)
{
  int i;
  int a[5] = {17, 23, 36};      // 使用 {17, 23, 36, 0, 0} 进行初始化
  int b[5];

  for (i=0; i<5; i++)
    b[i] = a[i];

  puts("   a   b");
  puts("--------");
  for (i=0; i<5; i++)
    printf("%4d%4d\n", a[i], b[i]);

  return 0;
}
#+end_src
+ *ex 5-3:* 对 list 5-5 (chap05/list0505.c) 中的程序进行修改，从头开始依使用 5、4、3、2、1 进行初始化。
  #+attr_html: :width 238px
  [[file:images/10509.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0503.c
// Description : 对 list 5-5 (chap05/list0505.c) 中的程序进行修改，从头开始依使用 5、4、3、2、1 进行初始化。

#include <stdio.h>

int main (void)
{
  int i;
  int v[5] = {5, 4, 3, 2, 1};

  for (i=0; i<5; i++)
    printf("v[%d] = %d\n", i, v[i]);

  return 0;
}
#+end_src
+ *ex 5-4:* 对 list 5-6 (chap05/list0506.c) 中的程序进行修改，将数组 a 中的元素按照倒序复制到数组 b 中。
  #+attr_html: :width 238px
  [[file:images/10510.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0504.c
// Description : 对 list 5-6 (chap05/list0506.c) 中的程序进行修改，将数组 a 中的元素按照倒序复制到数组 b 中。

#include <stdio.h>

int main (void)
{
  int i;
  int a[5] = {17, 23, 36};
  int b[5];

  for (i=0; i<5; i++)
    b[i] = a[4-i];

  puts("   a   b");
  puts("--------");
  for (i=0; i<5; i++)
    printf("%4d%4d\n", a[i], b[i]);

  return 0;
}
#+end_src
*** 输入数组元素的值
+ *list 5-7:* 输入数组元素的值并显示
  #+attr_html: :width 238px
  [[file:images/10511.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0507.c
// Description : 输入数组元素的值并显示

#include <stdio.h>

int main (void)
{
  int i;
  int x[5];

  for (i=0; i<5; i++){          // 输入元素的值
    printf("x[%d]: ", i);
    scanf("%d", &x[i]);
  }

  for (i=0; i<5; i++)           // 显示元素的值
    printf("x[%d] = %d\n", i, x[i]);

  return 0;
}
#+end_src
*** 对数组的元素进行倒序排列
+ *list 5-8:* 对数组的全部元素进行倒序排列
  #+attr_html: :width 238px
  [[file:images/10512.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0508.c
// Description : 对数组的全部元素进行倒序排列

#include <stdio.h>

int main (void)
{
  int i;
  int x[7];                     // int[7] 数组

  for (i=0; i<7; i++) {         // 输入元素的值
    printf("x[%d]: ", i);
    scanf("%d", &x[i]);
  }

  for (i=0; i<3; i++) {         // 对数组元素进行倒序排列
    int temp = x[i];
    x[i]     = x[6-i];          // 交换 x[i] 和 x[6-1]
    x[6-i]   = temp;
  }

  puts("倒序排列：");
  for (i=0; i<7; i++)           // 显示元素的值
    printf("x[%d] = %d\n", i, x[i]);

  return 0;
}
#+end_src
*** 使用数组进行成绩处理
+ *list 5-9:* 输入 5 名学生的分数并显示出他们的总分和平均分
  #+attr_html: :width 238px
  [[file:images/10513.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0509.c
// Description : 输入 5 名学生的分数并显示出他们的总分和平均分

#include <stdio.h>

int main (void)
{
  int i;
  int fenshu[5];                // 5 名学生的分数
  int sum = 0;                  // 总分

  printf("请输入 5 名学生的分数：\n");
  for (i=0; i<5; i++) {
    printf("%d 号：", i+1);
    scanf("%d", &fenshu[i]);
    sum += fenshu[i];
  }

  printf("总  分：%5d\n", sum);
  printf("平均分：%5.1f\n", (double)sum/5);

  return 0;
}
#+end_src
*** 对象式宏
+ *list 5-10:* 输入 5 名学生的分数并显示出他们的总分和平均分（用宏定义人数）
  #+attr_html: :width 238px
  [[file:images/10514.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0510.c
// Description : 输入 5 名学生的分数并显示出他们的总分和平均分（用宏定义人数）

#include <stdio.h>

#define NUMBER 5                // 学生人数

int main (void)
{
  int i;
  int fenshu[NUMBER];           // NUMBER 个学生的分数
  int sum = 0;                  // 总分

  printf("请输入 %d 名学生的分数：\n", NUMBER);
  for (i=0; i<NUMBER; i++) {
    printf("%2d 号：", i+1);
    scanf("%d", &fenshu[i]);
    sum += fenshu[i];
  }

  printf("总  分：%5d\n", sum);
  printf("平均分：%5.1f\n", (double)sum/NUMBER);

  return 0;
}
#+end_src
*** 数组元素的最大值和最小值
+ *list 5-11:* 输入学生的分数并显示出其中的最高分和最低分
  #+attr_html: :width 238px
  [[file:images/10515.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0511.c
// Description : 输入学生的分数并显示出其中的最高分和最低分

#include <stdio.h>

#define NUMBER 5                // 学生人数

int main (void)
{
  int i;
  int fenshu[NUMBER];           // NUMBER 名学生的分数
  int max, min;                 // 最高分和最低分

  printf("请输入 %d 名学生的分数：\n", NUMBER);
  for (i=0; i<NUMBER; i++) {
    printf("%2d 号：", i+1);
    scanf("%d", &fenshu[i]);
  }

  min = max = fenshu[0];

  for (i=1; i<NUMBER; i++) {
    if (fenshu[i] > max)  max=fenshu[i];
    if (fenshu[i] < min)  min=fenshu[i];
  }

  printf("最高分：%d\n", max);
  printf("最低分：%d\n", min);

  return 0;
}
#+end_src
*** 赋值表达式的判断
+ *ex 5-5:* 对 list 5-8(chap05/list0508.c) 中的程序进行修改，改为用对象宏来定义元素个数。
  主要需要找到有关元素交换次数的规则。
  #+attr_html: :width 238px
  [[file:images/10512.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0505.c
// Description : 对 list 5-8(chap05/list0508.c) 中的程序进行修改，改为用对象宏来定义元素个数。
//               主要需要找到有关元素交换次数的规则。

#include <stdio.h>

#define NUMBER 7

int main (void)
{
  int i;
  int x[NUMBER];

  for (i=0; i<NUMBER; i++) {
    printf("x[%d]: ", i);
    scanf("%d", &x[i]);
  }

  for (i=0; i<NUMBER/2; i++) {
    int temp = x[i];
    x[i] = x[NUMBER-1-i];
    x[NUMBER-1-i] = temp;
  }

  puts("倒序排列：");
  for (i=0; i<NUMBER; i++)
    printf("x[%d] = %d\n", i, x[i]);

  return 0;
}
#+end_src
+ *ex 5-6:* 假设变量 a 是 double 型，变量 b 是 int 型， 请说明经过下述赋值后 a 和 b 的值分别是多少。
  a = b = 1.5;
#+begin_src C
// a 的值为 1.000000
// b 的值为 1
#+end_src
*** 数组的元素个数
+ *list 5-12:* 输入学生的分数并显示出分布情况
  #+attr_html: :width 238px
  [[file:images/10516.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0512.c
// Description : 输入学生的分数并显示出分布情况

#include <stdio.h>

#define NUMBER 80               // 人数上限

int main (void)
{
  int i, j;
  int num;                      // 实际的人数
  int fenshu[NUMBER];           // 学生的分数
  int bunpu[11] = {0};          // 分布图

  printf("请输入学生人数：");

  do {                          // 将输入值限制在 1~NUMBER 的 do 语句
    scanf("%d", &num);
    if (num<1 || num>NUMBER)
      printf("\a请输入 1~%d 的数：", NUMBER);
  } while (num<1 || num>NUMBER);

  printf("请输入 %d 人的分数：\n", num);

  for (i=0; i<num; i++) {
    printf("%2d 号：", i+1);
    do {                        // 将输入值限制在 1~100 之间的 do 语句
      scanf("%d", &fenshu[i]);
      if (fenshu[i]<0 || fenshu[i]>100)
        printf("\a请输入 1~100 的数：");
    } while (fenshu[i]<0 || fenshu[i]>100);
    bunpu[fenshu[i]/10]++;
  }

  puts("--- 分布图 ---");
  printf("     100: ");

  for (j=0; j<bunpu[10]; j++)   // 100 分
    putchar('*');
  putchar('\n');

  for (i=9; i>=0; i--) {        // 不到 100 分
    printf("%3d - %2d: ", i*10, i*10+9);
    for (j=0; j<bunpu[i]; j++)
      putchar('*');
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 5-7:* 编写一段程序，像下图这样读取数组中的数据个数和元素并显示。
  显示时，各值之间用逗号和空格分割，并用大括号将所有值括起来。
  注意利用对象式宏来声明数组的元素个数，如 list 5-12 那样。
  #+attr_html: :width 238px
  [[file:images/10517.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0507.c
// Description : 编写一段程序，像下图这样读取数组中的数据个数和元素并显示。
//               显示时，各值之间用逗号和空格分割，并用大括号将所有值括起来。
//               注意利用对象式宏来声明数组的元素个数，如 list 5-12 那样。

#include <stdio.h>

#define NUMBER 10               // 最大个数

int main (void)
{
  int i;
  int num;                      // 实际个数
  int t[NUMBER];                // 数值

  printf("数据个数：");

  do {
    scanf("%d", &num);
    if (num<1 || num>NUMBER)
      printf("\a请输入 1~%d 的数：", NUMBER);
  } while (num<1 || num>NUMBER);

  for (i=0; i<num;i++) {
    printf("%d 号：", i+1);
    scanf("%d", &t[i]);
  }

  putchar('{');
  for (i=0; i<num; i++) {
    printf("%d", t[i]);
    if (i<num-1)
      printf(", ");
  }
  printf("}\n");

  return 0;
}
#+end_src
+ *ex 5-8:* 编写一段程序，逆向显示 list 5-12 (chap05/list0512.c) 的分布图
  （即按照 0-9、10-19、···、100 的顺序显示）
  #+attr_html: :width 238px
  [[file:images/10518.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0508.c
// Description : 编写一段程序，逆向显示 list 5-12 (chap05/list0512.c) 的分布图
//              （即按照 0-9、10-19、···、100 的顺序显示）

#include <stdio.h>

#define NUMBER 80               // 人数上限

int main (void)
{
  int i, j;
  int num;                      // 实际人数
  int fenshu[NUMBER];           // 学生的分数
  int bunpu[11] = {0};          // 分布图

  printf("请输入学生人数：");

  do {
    scanf("%d", &num);
    if (num<1 || num>NUMBER)
      printf("\a请输入 1~%d 的数：", NUMBER);
  } while (num<1 || num>NUMBER);

  printf("请输入 %d 人的分数：\n", num);

  for (i=0; i<num; i++) {
    printf("%2d 号：", i+1);
    do {
      scanf("%d", &fenshu[i]);
      if (fenshu[i]<0 || fenshu[i]>100)
        printf("\a请输入 1~100 的数：");
    } while (fenshu[i]<0 || fenshu[i]>100);
    bunpu[fenshu[i]/10]++;
  }

  puts("---分布图---");

  for (i=0; i<=9; i++) {
    printf("%3d -%3d: ", i*10, i*10+9);
    for (j=0; j<bunpu[i]; j++)
      putchar('*');
    putchar('\n');
  }

  printf("     100: ");

  for (j=0; j<bunpu[10]; j++)
    putchar('*');
  putchar('\n');

  return 0;
}
#+end_src
+ *ex 5-9:* 编写一度程序，像下图这样纵向显示 ex 5-8(chap05/ex0508.c) 中得到的分布图。
  #+attr_html: :width 316px
  [[file:images/10519.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0509.c
// Description : 编写一度程序，像下图这样纵向显示 ex 5-8(chap05/ex0508.c) 中得到的分布图。

#include <stdio.h>

#define NUMBER 80               // 人数上限

int main (void)
{
  int i, j;
  int num;                      // 实际人数
  int fenshu[NUMBER];           // 学生的分数
  int bunpu[11] = {0};          // 分布图
  int max;                      // 分布最多的分数段

  printf("请输入学生人数：");

  do {
    scanf("%d", &num);
    if (num<1 || num>NUMBER)
      printf("\a请输入 1~%d 的数：", NUMBER);
  } while (num<1 || num>NUMBER);

  printf("请输入 %d 人的分数：\n", num);

  for (i=0; i<num; i++) {
    printf("%2d 号：", i+1);
    do {
      scanf("%d", &fenshu[i]);
      if (fenshu[i]<0 || fenshu[i]>100)
        printf("\a请输入 1~100 的数：");
    } while (fenshu[i]<0 || fenshu[i]>100);
    bunpu[fenshu[i]/10]++;
  }

  puts("---分布图---");

  max = bunpu[0];
  for (i=1; i<=10; i++) {
    if (max < bunpu[i])
      max = bunpu[i];
  }

  for (i=max; i>0; i--) {
    putchar(' ');
    for (j=0; j<=10; j++) {
      if (i == bunpu[j]){
        printf("*   ");
        bunpu[j]--;
      } else {
        printf("    ");
      }
    }
    putchar('\n');
  }

  for (i=0; i<=10; i++)
    printf("----");
  putchar('\n');

  for (i=0; i<=10; i++) {
    if (i)
      printf("%-4d", i*10);
    else
      printf(" 0  ");
  }
  putchar('\n');

  return 0;
}
#+end_src
** 5-2: 多维数组
*** 多维数组
+ *list 5-13:* 求 4 名学生在两次考试中 3 门课程的总分并显示
  #+attr_html: :width 238px
  [[file:images/10520.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/list0513.c
// Description : 求 4 名学生在两次考试中 3 门课程的总分并显示

#include <stdio.h>

int main (void)
{
  int i, j;
  //          v--- int[3] 型元素的初始值有 4 个，所以可以省略。省略时自动认为是 4
  //          v         v----v---v--- int[3] 型元素 fenshu1[0] 的初始值
  int fenshu1[4][3] = {{91, 63, 78}, {67, 72, 46}, {89, 34, 53}, {32, 54, 34}};
  int fenshu2[4][3] = {{97, 67, 82}, {73, 43, 46}, {97, 56, 21}, {85, 46, 35}};
  int sum[4][3];                                 // 总分

  /// 求两次考试的分数之和
  for (i=0; i<4; i++) {                          // 4 名学生的
    for (j=0; j<3; j++)                          // 3 门课程的
      sum[i][j] = fenshu1[i][j] + fenshu2[i][j]; // 两次的分数相加
  }

  /// 显示第一次考试的分数
  puts("第一次考试的分数：");
  for (i=0; i<4; i++) {
    for (j=0; j<3; j++)
      printf("%4d", fenshu1[i][j]);
    putchar('\n');
  }

  /// 显示第二次考试的分数
  puts("第二次考试的分数：");
  for (i=0; i<4; i++) {
    for (j=0; j<3; j++)
      printf("%4d", fenshu2[i][j]);
    putchar('\n');
  }

  /// 显示总分
  puts("总分：");
  for (i=0; i<4; i++) {
    for (j=0; j<3; j++)
      printf("%4d", sum[i][j]);
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 5-10:* 编写一段程序，求 4 行 3 列矩阵和 3 行 4 列矩阵的乘积。各构成元素的值从键盘输入
  #+attr_html: :width 464px
  [[file:images/10521.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0510.c
// Description : 编写一段程序，求 4 行 3 列矩阵和 3 行 4 列矩阵的乘积。各构成元素的值从键盘输入

#include <stdio.h>

#define F 4
#define T 3

int main (void)
{
  int i, j, k;
  int matrix1[F][T];            // 4 行 3 列的矩阵
  int matrix2[T][F];            // 3 行 4 列的矩阵
  int matrix[F][F] = {0};             // 4 行 4 列的乘积矩阵

  printf("请输入一个 %d 行 %d 列矩阵的值：\n", F, T);
  for (i=0; i<F; i++) {
    for (j=0; j<T; j++) {
      printf("请输入第 %d 行的第 %d 个值：", i+1, j+1);
      scanf("%d", &matrix1[i][j]);
    }
  }

  puts("----------------------------------------------------------------");
  printf("请输入一个 %d 行 %d 列矩阵的值：\n", T, F);
  for (i=0; i<T; i++) {
    for (j=0; j<F; j++) {
      printf("请输入第 %d 行的第 %d 个值：", i+1, j+1);
      scanf("%d", &matrix2[i][j]);
    }
  }

  puts("----------------------------------------------------------------");
  printf("%d 行 %d 列的矩阵为：\n", F, T);
  for (i=0; i<F; i++) {
    for (j=0; j<T; j++)
      printf("%-5d", matrix1[i][j]);
    putchar('\n');
  }

  puts("----------------------------------------------------------------");
  printf("%d 行 %d 列的矩阵为：\n", T, F);
  for (i=0; i<T; i++) {
    for (j=0; j<F; j++)
      printf("%-5d", matrix2[i][j]);
    putchar('\n');
  }

  puts("----------------------------------------------------------------");
  puts("乘积的矩阵为：");
  puts("这里不会写，好像题意不明，两个矩阵的乘积得出的结果应该是多少乘多少的矩阵呢？");
  puts("网上找出了 4 种写法，结果各不相同，感觉也都有问题，暂放着吧");

  return 0;
}
#+end_src
+ *ex 5-11:* 编写一段程序，输入 6 名学生 2 门课程（语文、数学）的分数，
  显示各门课程的总分和平均分，以及各个学生的总分和平均分。
  #+attr_html: :width 303px
  [[file:images/10522.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0511.c
// Description : 编写一段程序，输入 6 名学生 2 门课程（语文、数学）的分数，
//               显示各门课程的总分和平均分，以及各个学生的总分和平均分。

#include <stdio.h>

int main (void)
{
  int i, j;
  int fenshu[6][2];
  int sum = 0;                     // 总分

  printf("请输入 6 名学生的语文和数学成绩：\n");

  for (i=0; i<6; i++) {
    for (j=0; j<2; j++) {
      do {
        if (j == 0)
          printf("请输入第 %d 名学生的语文成绩：", i+1);
        else
          printf("请输入第 %d 名学生的数学成绩：", i+1);
        scanf("%d", &fenshu[i][j]);
        if (fenshu[i][j]<0 || fenshu[i][j]>100) {
          printf("输入不合法，成绩区间为 1~100，请重新输入：\n");
        }
      } while (fenshu[i][j]<0 || fenshu[i][j]>100);
    }
  }

  puts("-------------------------------------------------------------");

  for (i=0; i<6; i++) {       // 语文总分
    sum += fenshu[i][0];
  }
  printf("语文总分为：%d，平均分为：%.2f\n", sum, (double)sum/6);

  sum = 0;
  for (i=0; i<6; i++) {       // 数学总分
    sum += fenshu[i][1];
  }
  printf("数学总分为：%d，平均分为：%.2f\n", sum, (double)sum/6);

  for (i=0; i<6; i++) {
    sum = 0;
    for (j=0; j<2; j++) {
      sum += fenshu[i][j];
    }
    printf("%d 号学生的总分为：%d，平均分为：%.2f\n", i+1, sum, (double)sum/2);
  }

  return 0;
}
#+end_src
+ *ex 5-12:* 改写 list 5-13(chap05/list0513.c) 的程序，将两次的考试分数存储在三维数组 fenshu 中。
  #+attr_html: :width 238px
  [[file:images/10520.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/ex0512.c
// Description : 改写 list 5-13(chap05/list0513.c) 的程序，将两次的考试分数存储在三维数组 fenshu 中。

#include <stdio.h>

int main (void)
{
  int i, j, k;
  int fenshu[2][4][3] = {
    {{91, 63, 78}, {67, 72, 46}, {89, 34, 53}, {32, 54, 34}},
    {{97, 67, 82}, {73, 43, 46}, {97, 56, 21}, {85, 46, 35}}
  };
  int sum[4][3] = {0};

  // 输出两次考试的分数
  for (i=0; i<2; i++) {
    printf("第 %d 次考试的分数：\n", i+1);
    for (j=0; j<4; j++) {
      for (k=0; k<3; k++)
        printf("%4d", fenshu[i][j][k]);
      putchar('\n');
    }
  }

  // 求两次考试的分数之和
  for (i=0; i<4; i++) {
    for (j=0; j<3; j++) {
      for (k=0; k<2; k++)
        sum[i][j] += fenshu[k][i][j];
    }
  }

  // 输出两次分数的和
  puts("总分：");
  for (i=0; i<4; i++) {
    for (j=0; j<3; j++)
      printf("%4d", sum[i][j]);
    putchar('\n');
  }

  return 0;
}
#+end_src
** 总结
+ *总结:*
#+attr_html: :width 238px
[[file:images/10523.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap05/summarya.c
// Description : 总结

#include <stdio.h>

#define SIZE 5                  // 数组 a 和 b 的元素个数

int main (void)
{
  int i, j;
  int sum;

  // 数组 a 和 b 是 int[5] 型的以为数组（元素类型为 int 型，元素个数为 5）
  int a[SIZE];                  // 使用不定值对所有元素进行初始化
  int b[SIZE] = {1, 2, 3};      // 使用 {1, 2, 3, 0, 0} 进行初始化

  // 数组 c 是 int[2][3] 型的二位数组（元素类型为 int[3] 型，元素个数为 2）
  int c[2][3] = {
    {11, 22, 33},
    {44, 55, 66},               // 这里的逗号 “,” 可以省略（数组的最后一个元素后的逗号）
  };

  // 将数组 b 的所有全部复制给数组 a
  for (i=0; i<SIZE; i++)
    a[i] = b[i];

  // 显示数组 a 的所有元素
  for (i=0; i<SIZE; i++)
    printf("a[%d] = %d\n", i, a[i]);
  putchar('\n');
  // 显示数组 b 的所有元素
  for (i=0; i<SIZE; i++)
    printf("b[%d] = %d\n", i, b[i]);

  // 将数组 a 的所有元素的和赋给 sum 并显示
  sum = 0;
  for (i=0; i<SIZE; i++)
    sum +=a[i];
  printf("数组 a 的所有元素的和为：%d\n", sum);

  // 显示数组 c 的全部构成元素的值
  for (i=0; i<2; i++) {
    for (j=0; j<3; j++)
      printf("c[%d][%d] = %d\n", i, j, c[i][j]);
  }

  return 0;
}
#+end_src
* 第 6 章：函数
** 6-1: 什么是函数
*** 函数调用
+ *list 6-1:* 求两个整数中较大的值
  #+attr_html: :width 238px
  [[file:images/10601.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0601.c
// Description : 求两个整数中较大的值

#include <stdio.h>

// 返回较大整数的值
int max2 (int a, int b)
{
  if (a > b)
    return a;
  else
    return b;
}

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  printf("较大的整数的值是：%d。\n", max2(n1, n2));

  return 0;
}
#+end_src
*** 三个数中的最大值
+ *list 6-2:* 求三个整数中的最大值
  #+attr_html: :width 238px
  [[file:images/10602.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0602.c
// Description : 求三个整数中的最大值

#include <stdio.h>

// 返回三个整数中的最大值
int max3 (int a, int b, int c)
{
  int max = a;

  if (b > max) max=b;
  if (c > max) max=c;

  return max;
}

int main (void)
{
  int a, b, c;

  puts("请输入三个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);
  printf("整数 c：");  scanf("%d", &c);

  printf("最大值是：%d。\n", max3(a, b, c));

  return 0;
}
#+end_src
+ *ex 6-1:* 创建一个函数，返回两个 int 型整数中教小一数的值。int min2 (int a, int b){}。
  为了确认函数的动作，还需要大家创建一个合适的 main 函数来组成一段完整的程序（之后的练习也是如此）
  #+attr_html: :width 238px
  [[file:images/10603.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0601.c
// Description : 创建一个函数，返回两个 int 型整数中教小一数的值。

#include <stdio.h>

// 返回两个整数中较小值
int min2 (int a, int b)
{
  if (a > b)
    return b;
  else
    return a;
}

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");

  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  printf("较小数是：%d。\n", min2(n1, n2));

  return 0;
}
#+end_src
+ *ex 6-2:* 创建一个函数，返回三个 int 型整数中的最小值。
  #+attr_html: :width 238px
  [[file:images/10604.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0602.c
// Description : 创建一个函数，返回三个 int 型整数中的最小值。

#include <stdio.h>

// 返回三个整数中的最小值
int min3 (int a, int b, int c)
{
  int min = a;

  if (min > b) min=b;
  if (min > c) min=c;

  return min;
}

int main (void)
{
  int n1, n2, n3;

  puts("请输入三个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);
  printf("整数 3：");  scanf("%d", &n3);

  printf("三个整数中最小的是：%d。\n", min3(n1, n2, n3));

  return 0;
}
#+end_src
*** 将函数的返回值作为参数传递给函数
+ *list 6-3:* 计算两个整数的平方差
  #+attr_html: :width 238px
  [[file:images/10605.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0603.c
// Description : 计算两个整数的平方差

#include <stdio.h>

// 返回 x 的平方
int sqr (int x)
{
  return x*x;
}

// 返回两个整数的差
int diff(int a, int b)
{
  return (a>b ? (a-b) : (b-a)); // 大值减小值
}

int main (void)
{
  int x, y;

  puts("请输入两个整数：");
  printf("整数 x：");  scanf("%d", &x);
  printf("整数 y：");  scanf("%d", &y);

  printf("x 和 y 的平方差是：%d。\n", diff(sqr(x), sqr(y)));

  return 0;
}
#+end_src
+ *ex 6-3:* 创建一个函数，返回 int 型整数的立方。
  #+attr_html: :width 238px
  [[file:images/10606.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0603.c
// Description : 创建一个函数，返回 int 型整数的立方。

#include <stdio.h>

// 返回 x 的立方
int cube (int x)
{
  return x*x*x;
}

int main (void)
{
  int x;

  printf("请输入一个整数：");
  scanf("%d", &x);

  printf("%d 的立方是：%d。\n", x, cube(x));

  return 0;
}
#+end_src
*** 调用其他函数
+ *list 6-4:* 求四个整数中的最大值
  #+attr_html: :width 238px
  [[file:images/10607.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0604.c
// Description : 求四个整数中的最大值

#include <stdio.h>

// 返回两个整数中的较大值
int max2 (int a, int b)
{
  return (a > b) ? a : b;
}

// 返回四个整数中的较大值
int max4 (int a, int b, int c, int d)
{
  return max2(max2(a, b), max2(c, d));
}

int main (void)
{
  int n1, n2, n3, n4;

  puts("请输入四个整数：");
  printf("整数 n1：");  scanf("%d", &n1);
  printf("整数 n2：");  scanf("%d", &n2);
  printf("整数 n3：");  scanf("%d", &n3);
  printf("整数 n4：");  scanf("%d", &n4);

  printf("最大值是：%d。\n", max4(n1, n2, n3, n4));

  return 0;
}
#+end_src
+ *ex 6-4:* 使用 list 6-3(chap06/list0603.c) 中的 sqr 函数创建另一个函数，返回 int 型整数的四次幂。
  #+attr_html: :width 238px
  [[file:images/10608.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0604.c
// Description : 使用 list 6-3(chap06/list0603.c) 中的 sqr 函数创建另一个函数，返回 int 型整数的四次幂。

#include <stdio.h>

// 返回 x 的平方
int sqr (int x)
{
  return x*x;
}

// 返回 x 的四次幂
int pow4 (int x)
{
  return sqr(sqr(x));
}

int main (void)
{
  int x;

  printf("请输入一个整数：");
  scanf("%d", &x);

  printf("%d 的四次幂是：%d。\n", x, pow4(x));

  return 0;
}
#+end_src
*** 值传递
+ *list 6-5:* 计算幂
  #+attr_html: :width 238px
  [[file:images/10609.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0605.c
// Description : 计算幂

#include <stdio.h>

// 返回 x 的 n 次幂
double power(double x, int n)
{
  int i;
  double tmp = 1.0;

  for (i=1; i<=n; i++)
    tmp *= x;
  return tmp;                   // tmp 乘以 x
}

int main (void)
{
  double a;
  int    b;

  printf("求 a 的 b 次幂。\n");
  printf("实数 a：");  scanf("%lf", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("%.2f 的 %d 次幂是：%.2f。\n", a, b, power(a, b));

  return 0;
}
#+end_src
+ *list 6-6:* 计算幂
  #+attr_html: :width 238px
  [[file:images/10609.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0606.c
// Description : 计算幂

#include <stdio.h>

// 返回 x 的 n 次幂
double power (double x, int n)
{
  double tmp = 1.0;

  while (n-- > 0)
    tmp *= x;                   // tmp 乘以 x
  return tmp;
}

int main (void)
{
  double a;
  int    b;

  printf("求 a 的 b 次幂。\n");
  printf("实数 a：");  scanf("%lf", &a);
  printf("整数 b：");  scanf("%d", &b);

  printf("%.2f 的 %d 次幂是：%.2f。\n", a, b, power(a, b));

  return 0;
}
#+end_src
+ *ex 6-5:* 创建一个函数，返回 1 到 n 之间所有整数的和。
  #+attr_html: :width 238px
  [[file:images/10610.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0605.c
// Description : 创建一个函数，返回 1 到 n 之间所有整数的和。

#include <stdio.h>

// 返回 1 到 n 之间所有整数的和
int sumup (int n)
{
  int sum = 0;

  while (n > 0) {
    sum += n;
    n--;
  }

  return sum;
}

int main (void)
{
  int n;

  printf("请输入一个整数：");
  scanf("%d", &n);

  printf("1 到 %d 之间所有整数的和为：%d。\n", n, sumup(n));

  return 0;
}
#+end_src
** 6-2: 函数设计
*** 没有a返回值的函数
+ *list 6-7:* 显示出一个直角在左下方的等腰直角三角形（函数版）
  #+attr_html: :width 238px
  [[file:images/10611.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0607.c
// Description : 显示出一个直角在左下方的等腰直角三角形（函数版）

#include <stdio.h>

// 连续显示出 n 个 '*'
void put_stars (int n)
{
  while (n-- > 0)               // 递减的控制表达式和 chap06/list0606.c 一样
    putchar('*');
}

int main (void)
{
  int i, len;

  puts("生轩一个直角在左下方的等腰直角三角形。");
  printf("短边：");
  scanf("%d", &len);

  for (i=1; i<=len; i++) {
    put_stars(i);
    putchar('\n');
  }

  return 0;
}
#+end_src
*** 通用性
+ *list 6-8:* 显示直角在右下方的等腰直角三角形（函数版）
  #+attr_html: :width 238px
  [[file:images/10612.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0608.c
// Description : 显示直角在右下方的等腰直角三角形（函数版）

#include <stdio.h>

// 连续显示 n 个 ch 字符
void put_chars (int ch, int n)
{
  while (n-- > 0)
    putchar(ch);
}

int main (void)
{
  int i, len;

  puts("生成一个直角在右下方的等腰直角三角形。");
  printf("短边：");
  scanf("%d", &len);

  for (i=1; i<=len; i++) {
    put_chars(' ', len-i);
    put_chars('*', i);
    putchar('\n');
  }

  return 0;
}
#+end_src
+ *ex 6-6:* 创建一个函数，连续发出 n 次响铃
  #+attr_html: :width 238px
  [[file:images/10613.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0606.c
// Description : 创建一个函数，连续发出 n 次响铃

#include <stdio.h>

// 连续发出 n 次响铃
void alert (int n)
{
  while (n-- > 0)
    putchar('\a');
}

int main (void)
{
  int len;

  printf("输入连续响铃的次数：");
  scanf("%d", &len);

  alert(len);

  return 0;
}
#+end_src
*** 不含形参的函数
+ *list 6-9:* 逆向显示输入的正整数
  #+attr_html: :width 238px
  [[file:images/10614.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0609.c
// Description : 逆向显示输入的正整数

#include <stdio.h>

// 返回输入的正整数
int scan_print ()
{
  int tmp;

  do {
    printf("请输入一个正整数：");
    scanf("%d", &tmp);
    if (tmp <= 0)
      puts("请不要输入非正整数！");
  } while (tmp <= 0);
  return tmp;
}

// 返回正整数倒转后的值
int rev_int (int num)
{
  int tmp = 0;

  if (num > 0) {
    do {
      tmp = tmp*10 + num%10;
      num /= 10;
    } while (num > 0);
  }
  return tmp;
}

int main (void)
{
  int nx = scan_print();
  printf("该整数倒转后的值是：%d。\n", rev_int(nx));

  return 0;
}
#+end_src
*** 作用域
+ *ex 6-7:* 创建一个函数，在屏幕上显示出 “你好。” 并换行
  #+attr_html: :width 238px
  [[file:images/10615.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0607.c
// Description : 创建一个函数，在屏幕上显示出 “你好。” 并换行

#include <stdio.h>

// 在屏幕上显示 你好。
void hello ()
{
  puts("你好。");
}

int main (void)
{
  hello();

  return 0;
}
#+end_src
*** 文件作用域
+ *list 6-10:* 计算最高分
  #+attr_html: :width 238px
  [[file:images/10616.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0610.c
// Description : 计算最高分

#include <stdio.h>

#define NUMBER 5                // 学生人数

int fenshu[NUMBER];             // 数组定义

int top();                      // 函数 top 的函数原型声明

int main (void)
{
  extern int fenshu[];          // 数组的声明（可以省略）
  int i;

  printf("请输入 %d 名学生的分数。\n", NUMBER);
  for (i=0; i<NUMBER; i++) {
    printf("%d: ", i+1);
    scanf("%d", &fenshu[i]);
  }
  printf("最高分 = %d\n", top());

  return 0;
}

// 返回数组 fenshu 的最大值（函数 top 的函数定义）
int top ()
{
  extern int fenshu[];          // 数组的声明（可以省略）
  int i;
  int max = fenshu[0];

  for (i=1; i<NUMBER; i++)
    if (fenshu[i] > max)
      max = fenshu[i];

  return max;
}
#+end_src
*** 数组的传递
+ *list 6-11:* 计算英语分数和数学分数中的最高分
  #+attr_html: :width 238px
  [[file:images/10617.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0611.c
// Description : 计算英语分数和数学分数中的最高分

#include <stdio.h>

#define NUMBER 5                // 学生人数

// 返回元素个数为 n 的数组 v 中的最大值
int max_of (int v[], int n)
{       //       ^--- 在接收数组的形参声明中需要加上 []
  int i;
  int max = v[0];

  for (i=1; i<n; i++) {
    if (v[i] > max)
      max = v[i];
  }

  return max;
}
int main (void)
{
  int i;
  int eng[NUMBER];              // 英语的分数
  int mat[NUMBER];              // 数学的分数
  int max_e, max_m;             // 英语和数学的最高分

  printf("请输入 %d 名学生的分数：\n", NUMBER);
  for (i=0; i<NUMBER; i++) {
    printf("[%d] 英语：", i+1);  scanf("%d", &eng[i]);
    printf("    数学：");       scanf("%d", &mat[i]);
  }
  max_e = max_of(eng, NUMBER);
  max_m = max_of(mat, NUMBER);
  //               ^--- 调用方直接写下数组名，不加[]
  printf("英语的最高分 = %d\n", max_e);
  printf("数学的最高分 = %d\n", max_m);

  return 0;
}
#+end_src
*** 函数的传递和 const 类型的修饰符
+ *list 6-12:* 将数组的所有元素设置为 0
  #+attr_html: :width 238px
  [[file:images/10618.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0612.c
// Description : 将数组的所有元素设置为 0

#include <stdio.h>

// 把 0 赋给有 n 个a匀速的数组 v 的所有元素
void set_zero (int v[], int n)
{
  int i;
  for (i=0; i<n; i++)
    v[i] = 0;
}

// 显示有 n 个元素的数组 v 的所有元素并换行
void print_array (const int v[], int n)
{              //   ^--- 声明不改变所接收的数组的元素的值
  int i;

  printf("{");
  for (i=0; i<n; i++)
    printf("%d ", v[i]);
  printf("}");
}

int main (void)
{
  int arr1[] = {1, 2, 3, 4, 5};
  int arr2[] = {3, 2, 1};

  printf("arr1 = ");  print_array(arr1, 5);  putchar('\n');
  printf("arr2 = ");  print_array(arr2, 3);  putchar('\n');

  set_zero(arr1, 5);            // 把 0 赋值给数组 arr1 的所有元素
  set_zero(arr2, 3);            // 把 0 赋值给数组 arr2 的所有元素

  puts("把 0 赋给了两个数组的所有元素。");
  printf("arr1 = ");  print_array(arr1, 5);  putchar('\n');
  printf("arr2 = ");  print_array(arr2, 3);  putchar('\n');

  return 0;
}
#+end_src
+ *ex 6-8:* 创建一个函数，返回元素个数为 n 的 int 型数组 v 中的最小值
  #+attr_html: :width 238px
  [[file:images/10619.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0608.c
// Description : 创建一个函数，返回元素个数为 n 的 int 型数组 v 中的最小值

#include <stdio.h>

// 返回元素个数为 n 的 int 型数组 v 中的最小值
int min_of (const int v[], int n)
{
  int i;
  int min = v[0];

  for (i=1; i<n; i++) {
    if (v[i] < min)
      min = v[i];
  }

  return min;
}

int main (void)
{
  int x[5] = {3, 5, 1, 6, 8};

  printf("最小值为：%d\n", min_of(x, 5));

  return 0;
}
#+end_src
+ *ex 6-9:* 创建一个函数，对元素个数为 n 的 int 型数组 v 进行倒序排列
  #+attr_html: :width 238px
  [[file:images/10620.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0609.c
// Description : 创建一个函数，对元素个数为 n 的 int 型数组 v 进行倒序排列

#include <stdio.h>

// 对元素个数为 n 的 int 型数组 v 进行倒序排列
void rev_intary (int v[], int n)
{
  int i, tmp;

  for (i=0; i<n/2; i++) {
    tmp = v[i];
    v[i] = v[n-i-1];
    v[n-i-1] = tmp;
  }
}

int main (void)
{
  int i;
  int x[5] = {1, 2, 3, 4, 5};

  rev_intary(x, 5);

  putchar('{');
  for (i=0; i<5; i++) {
    printf("%d ", x[i]);
  }
  printf("}\n");

  return 0;
}
#+end_src
+ *ex 6-10:* 创建一个函数，对元素个数为 n 的 int 型数组 v2 进行倒序排列，并将其结果保存在数组 v1 中
  #+attr_html: :width 238px
  [[file:images/10620.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0610.c
// Description : 创建一个函数，对元素个数为 n 的 int 型数组 v2 进行倒序排列，并将其结果保存在数组 v1 中

#include <stdio.h>

// 对元素个数为 n 的 int 型数组 v2 进行倒序排列，并将其结果保存在数组 v1 中
void intary_rcpy (int v1[], const int v2[], int n)
{
  int i;

  for (i=0; i<n; i++) {
    v1[i] = v2[n-1-i];
  }
}

int main (void)
{
  int i;
  int a[5] = {0};
  int b[5] = {1, 2, 3, 4, 5};

  intary_rcpy(a, b, 5);

  printf("{");
  for (i=0; i<5; i++) {
    printf("%d ", a[i]);
  }
  printf("}\n");

  return 0;
}
#+end_src
*** 线性查找（顺序查找）
+ *list 6-13:* 线性查找（顺序查找）
  #+attr_html: :width 238px
  [[file:images/10621.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0613.c
// Description : 线性查找（顺序查找）

#include <stdio.h>

#define NUMBER 5                // 元素个数
#define FAILED -1               // 查找失败

// 查找元素数为 n 的数组 v 中与 key 一致的元素
int search (const int v[], int key, int n)
{
  int i = 0;

  while (1) {
    if (i == n)
      return FAILED;            // 查找失败
    if (v[i] == key)
      return i;                 // 查找成功
    i++;
  }
}

int main (void)
{
  int i, ky, idx;
  int vx[NUMBER];

  for (i=0; i<NUMBER; i++) {
    printf("vx[%d]: ", i);
    scanf("%d", &vx[i]);
  }

  printf("要查找的值：");
  scanf("%d", &ky);

  idx = search(vx, ky, NUMBER); // 从元素个数为 NUMBER 的数组 vx 中查找 ky

  if (idx == FAILED)
    puts("\a查找失败！");
  else
    printf("%d 是数组的第 %d 号元素。\n", ky, idx+1);

  return 0;
}
#+end_src
*** 哨兵查找法
+ *list 6014:* 顺序查找（哨兵查找法）
  #+attr_html: :width 238px
  [[file:images/10621.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0614.c
// Description : 顺序查找（哨兵查找法）

#include <stdio.h>

#define NUMBER 5                // 元素个数
#define FAILED -1               // 查找失败

// 查找元素数为 n 的数组 v 中与 key 一致的元素（哨兵查找法）
int search (int v[], int key, int n)
{
  int i = 0;
  v[n]  = key;                  // 添加哨兵

  while (1) {
    if (v[i] == key)
      break;                    // 查找成功
    i++;
  }
  return (i<n) ? i : FAILED;
}

int main (void)
{
  int i, ky, idx;
  int vx[NUMBER+1];             // 多准备 1 个元素

  for (i=0; i<NUMBER; i++) {
    printf("vx[%d]: ", i);
    scanf("%d", &vx[i]);
  }
  printf("要查找的值：");
  scanf("%d", &ky);

  if ((idx = search(vx, ky, NUMBER)) == FAILED)
    puts("\a查找失败！");
  else
    printf("%d 是数组的第 %d 号元素。\n", ky, idx+1);

  return 0;
}
#+end_src
+ *list 6-15:* 顺序查找（哨兵查找法 使用 for）
  #+attr_html: :width 238px
  [[file:images/10621.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0614.c
// Description : 顺序查找（哨兵查找法）

#include <stdio.h>

#define NUMBER 5                // 元素个数
#define FAILED -1               // 查找失败

// 查找元素数为 n 的数组 v 中与 key 一致的元素（哨兵查找法 使用 for）
int search (int v[], int key, int n)
{
  int i;
  v[n]  = key;                  // 添加哨兵

  for (i=0; v[i]!=key; i++);

  return (i<n) ? i : FAILED;
}

int main (void)
{
  int i, ky, idx;
  int vx[NUMBER+1];             // 多准备 1 个元素

  for (i=0; i<NUMBER; i++) {
    printf("vx[%d]: ", i);
    scanf("%d", &vx[i]);
  }
  printf("要查找的值：");
  scanf("%d", &ky);

  if ((idx = search(vx, ky, NUMBER)) == FAILED)
    puts("\a查找失败！");
  else
    printf("%d 是数组的第 %d 号元素。\n", ky, idx+1);

  return 0;
}
#+end_src
+ *ex 6-11:* 创建一个函数 serch_idx，将和有 n 个元素的数组 v 中的 key 相等的所有元素的下标存储在数组 idx 中，
  返回和 key 相等的元素的个数。
  #+attr_html: :width 238px
  [[file:images/10622.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0611.c
// Description : 创建一个函数 serch_idx，将和有 n 个元素的数组 v 中的 key 相等的所有元素的下标存储在数组 idx 中，
//               返回和 key 相等的元素的个数。

#include <stdio.h>

#define NUMBER 5

// 将和有 n 个元素的数组 v 中的 key 相等的所有元素的下标存储在数组 idx 中，
// 返回和 key 相等的元素的个数。
int search_idx (const int v[], int idx[], int key, int n)
{
  int i, j=0;

  for (i=0; i<5; i++) {
    if (v[i] == key){
      idx[j++] = i;
    }
  }

  return j;
}

int main (void)
{
  int i;
  int vx[NUMBER], idx[NUMBER], ky, n;

  for (i=0; i<NUMBER; i++) {
    printf("vx[%d]: ", i);
    scanf("%d", &vx[i]);
  }
  printf("要查找的值：");
  scanf("%d", &ky);

  printf("相等的元素有 %d 个。\n", search_idx(vx, idx, ky, NUMBER));

  printf("idx: {");
  for (i=0; i<NUMBER; i++) {
    printf("%d ", idx[i]);
  }
  printf("}\n");

  return 0;
}
#+end_src
*** 多维数组的传递
+ *ex 6-12:* 创建一个函数，将 4 行 3 列矩阵 a 和 3 行 4 列矩阵 b 的乘积，存储在 3 行 3 列矩阵 c 中。
#+begin_src C
// 不知咋写
#+end_src
+ *list 6-16:* 求 4 名学生在两次考试中 3 课程的总分并显示（函数版）
  #+attr_html: :width 238px
  [[file:images/10623.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0616.c
// Description : 求 4 名学生在两次考试中 3 课程的总分并显示（函数版）

#include <stdio.h>

// 将 4 行 3 列矩阵 a 和 b 的和存储在 c 中
void mat_add (const int a[4][3], const int b[4][3], int c[4][3])
{
  int i, j;
  for (i=0; i<4; i++)
    for (j=0; j<3; j++)
      c[i][j] = a[i][j] + b[i][j];
}

// 显示 4 行 3 列矩阵 m
void mat_print (const int m[4][3])
{
  int i, j;
  for (i=0; i<4; i++) {
    for (j=0; j<3; j++)
      printf("%4d", m[i][j]);
    putchar('\n');
  }
}

int main (void)
{
  int fenshu1[4][3] = {{91, 63, 78}, {67, 72, 46}, {89, 34, 53}, {32, 54, 34}};
  int fenshu2[4][3] = {{97, 67, 82}, {73, 43, 46}, {97, 56, 21}, {85, 46, 35}};
  int sum[4][3];                                 // 总分

  mat_add(fenshu1, fenshu2, sum);                // 求两次考试中乘积的总和

  puts("第一次考试分数：");  mat_print(fenshu1); // 显示第一次考试的分数
  puts("第二次考试分数：");  mat_print(fenshu2); // 显示第二次考试的分数
  puts("总分：");            mat_print(sum);    // 显示总分

  return 0;
}
#+end_src
+ *ex 6-13:* 改写 list 6-16(chap06/list0616.c) 的程序，将两次考试的分数存储在三维数组中
#+begin_src C
// ???
#+end_src
+ *list 6C-1:* 为 n 行 3 列的二维数组的所有构成元素赋上同样的值
  #+attr_html: :width 238px
  [[file:images/10624.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/listC0601.c
// Description : 为 n 行 3 列的二维数组的所有构成元素赋上同样的值

#include <stdio.h>

// 将 v 赋值给元素类型为 int[3]、元素个数为 n 的数组 m 的所有构成元素
void fill (int m[][3], int n, int v)
{
  int i, j;
  for (i=0; i<n; i++)
    for (j=0; j<3; j++)
      m[i][j] = v;
}

// 显示元素类型为 int[3]、元素个数为 n 的数组 m 的所有构成元素
void mat_print (const int m[][3], int n)
{
  int i, j;
  for (i=0; i<n; i++) {
    for (j=0; j<3; j++)
      printf("%-4d", m[i][j]);
    putchar('\n');
  }
}

int main (void)
{
  int no;
  int x[2][3] = {0};            // 2 行 3 列：元素类型为 int[3]、元素个数为 2
  int y[4][3] = {0};            // 4 行 3 列：元素类型为 int[3]、元素个数为 4

  printf("赋给所有构成元素的值：");
  scanf("%d", &no);

  fill(x, 2, no);               // 将 no 赋给 x 的所有构成元素
  fill(y, 4, no);               // 将 no 赋给 y 的所有构成元素

  printf("--- x ---\n");  mat_print(x, 2);
  printf("--- y ---\n");  mat_print(y, 4);

  return 0;
}
#+end_src
** 作用域和存储期
*** 作用域和标识符的可见性
+ *list 6-7:* 确认标识符的作用域
  #+attr_html: :width 238px
  [[file:images/10625.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0617.c
// Description : 确认标识符的作用域

#include <stdio.h>

int x = 75;                     // 文件作用域

void print_x ()
{
  printf("x = %d\n", x);
}

int main (void)
{
  int i;
  int x = 999;                  // 块作用域

  print_x();

  printf("x = %d\n", x);

  for (i=0; i<5; i++) {
    int x = i * 100;            // 块作用域
    printf("x = %d\n", x);
  }

  printf("x = %d\n", x);

  return 0;
}
#+end_src
*** 存储期
+ *list 6-18:* 自动存储期和静态存储期
  #+attr_html: :width 238px
  [[file:images/10626.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0618.c
// Description : 自动存储期和静态存储期

#include <stdio.h>

int fx = 0;                     // 静态存储期 + 文件作用域

void func ()
{
  static int sx = 0;            // 静态存储期 + 块作用域
  int        ax = 0;            // 自动存储期 + 块作用域

  printf("%3d%3d%3d\n", ax++, sx++, fx++);
}

int main (void)
{
  int i;

  puts(" ax sx fx");
  puts("----------");
  for (i=0; i<10; i++)
    func();
  puts("----------");
}
#+end_src
+ *list 6-19:* 确认拥有静态存储期的对象的默认的初始化
  #+attr_html: :width 238px
  [[file:images/10627.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/list0619.c
// Description : 确认拥有静态存储期的对象的默认的初始化

#include <stdio.h>

int fx;                         // 用 0 初始化

int main (void)
{
  int i;
  static int    si;             // 用 0 初始化
  static double sd;             // 用 0.0 初始化
  static int    sa[5];          // 所有元素都用 0 初始化

  printf("fx = %d\n", fx);
  printf("si = %d\n", si);
  printf("sd = %f\n", sd);      // linux x64 下 clang12 这里必须用 %f，如果用 %d 会给个随机数字，每次运行结果都不同

  for (i=0; i<5; i++)
    printf("sa[%d] = %d\n", i, sa[i]);

  return 0;
}
#+end_src
+ *ex 6-14:* 编写一段程序，为 double 型数组的所有元素分配静态存储期，并确认它们都被初始化为 0.0
  #+attr_html: :width 238px
  [[file:images/10628.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0614.c
// Description : 编写一段程序，为 double 型数组的所有元素分配静态存储期，并确认它们都被初始化为 0.0

# include <stdio.h>

int main (void)
{
  int i;
  static double d[5];

  putchar('{');
  for (i=0; i<5; i++)
    printf("%.1f ", d[i]);      // linux x64 clang12 这里必须使用 %f，使用 %d 的话给的是随机数字
  printf("}\n");

  return 0;
}
#+end_src
+ *ex 6-15:* 创建函数 put_count，显示被调用的次数
  #+attr_html: :width 238px
  [[file:images/10629.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/ex0615.c
// Description : 创建函数 put_count，显示被调用的次数

#include <stdio.h>

int x;

void put_count ()
{
  printf("put_count: 第 %d 次\n", ++x);
}

int main (void)
{
  int i;

  for (i=0; i<3; i++)
    put_count();

  return 0;
}
#+end_src
** 总结
+ *总结 1:* 求两个整数值的平均值
  #+attr_html: :width 238px
  [[file:images/10630.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/summary1.c
// Description : 求两个整数值的平均值

#include <stdio.h>

// 以实数的形式返回 a 和 b 的平均值
double ave2 (int a, int b)
{
  return (double)(a+b)/2;
}

int main (void)
{
  int n1, n2;

  puts("请输入两个整数：");
  printf("整数 1：");  scanf("%d", &n1);
  printf("整数 2：");  scanf("%d", &n2);

  printf("平均值为 %.1f\n", ave2(n1, n2));

  return 0;
}
#+end_src
+ *总结 2:* 记住上一次的值
  #+attr_html: :width 268px
  [[file:images/10631.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/summary2.c
// Description : 记住上一次的值

#include <stdio.h>

// 记下 no 返回上一次的值
int val (int no)
{
  static int v;
  int temp = v;

  v = no;
  return temp;
}

int main (void)
{
  int retry;

  do {
    int n;

    printf("要记下的值：");
    scanf("%d", &n);
    printf("记下了，上一次的值是 %d。\n", val(n));

    printf("是否继续？【Yes···0 / No···9】：");
    scanf("%d", &retry);
  } while (retry == 0);

  return 0;
}
#+end_src
+ *总结 3:* 以实数的形式返回数组 a 的所有元素的平均值
  #+attr_html: :width 238px
  [[file:images/10632.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/summary3.c
// Description : 以实数的形式返回数组 a 的所有元素的平均值

#include <stdio.h>

#define NUMBER 5                // 元素个数

// 以实数的形式返回数组 a 的所有元素的平均值
double ave_ary (const int a[], int n)
{
  int i;
  double sum = 0;

  for (i=0; i<n; i++)
    sum += a[i];
  return sum/n;
}

int main (void)
{
  int i;
  int v[NUMBER];

  for (i=0; i<NUMBER; i++) {
    printf("v[%d]: ", i);
    scanf("%d", &v[i]);
  }

  printf("所有元素的平均值是 %.1f。\n", ave_ary(v, NUMBER));

  return 0;
}
#+end_src
+ *总结 4:* 输出响铃
  #+attr_html: :width 238px
  [[file:images/10633.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/summary4.c
// Description : 输出响铃

#include <stdio.h>

// 输出响铃
void put_alert()
{
  putchar('\a');
}

int main (void)
{
  int i, no;

  printf("输出响铃的次数：");
  scanf("%d", &no);

  for (i=0; i<no; i++)
    put_alert();

  return 0;
}
#+end_src
+ *总结 5:* 赋值数组 a 的元素
  #+attr_html: :width 238px
  [[file:images/10634.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/summary5.c
// Description : 赋值数组 a 的元素

#include <stdio.h>

#define NUMBER 5                // 元素个数

// 将数组 b 开头的 n 个元素复制给数组 a
void cpy_ary (int a[], const int b[], int n)
{
  int i;

  for (i=0; i<n; i++)
    a[i] = b[i];
}

int main (void)
{
  int i;
  int v1[NUMBER];               // 被复制的数组
  int v2[NUMBER];               // 复制目标数组

  for (i=0; i<NUMBER; i++) {
    printf("v1[%d]: ", i);
    scanf("%d", &v1[i]);
  }

  cpy_ary(v2, v1, NUMBER);      // 将 v1 的所有元素复制给 v2

  puts("已将 v1 的所有元素复制给 v2：");

  for (i=0; i<NUMBER; i++) {
    printf("v2[%d]: %d\n", i, v2[i]);
  }

  return 0;
}
#+end_src
+ *总结 6:* 求二维数组 a 的所有构成元素的总和
  #+attr_html: :width 238px
  [[file:images/10635.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap06/summary6.c
// Description : 求二维数组 a 的所有构成元素的总和

#include <stdio.h>

// 显示二维数组的所有构成元素的值
void put_ary2D (const int m[][3], int n)
{
  int i, j;

  for (i=0; i<n; i++) {
    for (j=0; j<3; j++)
      printf("%4d", m[i][j]);
    putchar('\n');
  }
}

// 返回二维数组 a 的所有构成元素的总和
int sum_ary2D (const int a[][3], int n)
{
  int i, j;
  int sum = 0;

  for (i=0; i<n; i++)
    for (j=0; j<3; j++)
      sum += a[i][j];

  return sum;
}

int main (void)
{
  int m1[4][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10, 11, 12}};
  int m2[2][3] = {{1, 3, 5}, {7, 9, 11}};

  puts("二维数组 m1");
  put_ary2D(m1, 4);
  printf("总和是 %d。\n", sum_ary2D(m1, 4));

  puts("二维数组 m2");
  put_ary2D(m2, 2);
  printf("总和是 %d。\n", sum_ary2D(m2, 2));

  return 0;
}
#+end_src
* 第 7 章：基本数据类型
** 7-2: 整型和字符型
*** <limits.h> 头文件
+ *list 7-1:* 显示字符型和整型数据类型的表示范围（运行结果因编译器和运行环境而异）
  #+attr_html: :width 430px
  [[file:images/10701.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0701.c
// Description : 显示字符型和整型数据类型的表示范围（运行结果因编译器和运行环境而异）

#include <stdio.h>
#include <limits.h>

int main (void)
{

  puts("该环境下各字符型、整型数值的范围：");
  printf("char            : %d ~ %d\n"   , CHAR_MIN  , CHAR_MAX);
  printf("signed char     : %d ~ %d\n"   , SCHAR_MIN , SCHAR_MAX);
  printf("unsigned char   : %d ~ %d\n"   , 0         , UCHAR_MAX);

  printf("short           : %d ~ %d\n"   , SHRT_MIN  , SHRT_MAX);
  printf("int             : %d ~ %d\n"   , INT_MIN   , INT_MAX);
  printf("long            : %ld ~ %ld\n" , LONG_MIN  , LONG_MAX);

  printf("unsigned short  : %u ~ %u\n"   , 0         , USHRT_MAX);
  printf("unsigned        : %u ~ %u\n"   , 0         , UINT_MAX);
  printf("unsigned long   : %lu ~ %lu\n" , 0         , ULONG_MAX);

  return 0;
}
#+end_src
*** 字符型
+ *list 7-2:* 判断 char 型有无符号（运行结果因编译器和运行环境而异）
  #+attr_html: :width 238px
  [[file:images/10702.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0702.c
// Description : 判断 char 型有无符号（运行结果因编译器和运行环境而异）

#include <stdio.h>
#include <limits.h>

int main (void)
{

  printf("这个编译器中的 char 型是");

  if (CHAR_MIN)
    puts("有符号的。");         // CHAR_MIN 不为 0
  else
    puts("无符号的。");         // CHAR_MIN 为 0

  return 0;
}
#+end_src
*** sizeof 运算符
+ *list 7-3:* 显示字符型和整型的长度（运行结果因编译器和运行环境而异）
  #+attr_html: :width 238px
  [[file:images/10703.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0703.c
// Description : 显示字符型和整型的长度（运行结果因编译器和运行环境而异）

#include <stdio.h>
#include <limits.h>

int main (void)
{

  printf("sizeof(char)  = %u\n", (unsigned)sizeof(char));
  printf("sizeof(short) = %u\n", (unsigned)sizeof(short));
  printf("sizeof(int)   = %u\n", (unsigned)sizeof(int));
  printf("sizeof(long)  = %u\n", (unsigned)sizeof(long));
  //                       ^--- unsigned 型的显示为 u，而不是 d
  return 0;
}
#+end_src
*** 整型的灵活运用
+ *list 7-4:* 显示数据类型和变量的长度（运行结果因编译器和运行环境而异）
  #+attr_html: :width 238px
  [[file:images/10704.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0704.c
// Description : 显示数据类型和变量的长度（运行结果因编译器和运行环境而异）

#include <stdio.h>
#include <limits.h>

int main (void)
{

  int    na, nb;
  double dx, dy;

  printf("sizeof(int)     = %u\n"   , (unsigned)sizeof(int));
  printf("sizeof(double)  = %u\n\n" , (unsigned)sizeof(double));

  printf("sizeof(na)      = %u\n"   , (unsigned)sizeof(na));
  printf("sizeof(dx)      = %u\n\n" , (unsigned)sizeof(dx));

  printf("sizeof(na + nb) = %u\n"   , (unsigned)sizeof(na + nb));
  printf("sizeof(na + dy) = %u\n"   , (unsigned)sizeof(na + dy));
  printf("sizeof(dx + dy) = %u\n"   , (unsigned)sizeof(dx + dy));

  return 0;
}
#+end_src
+ *list 7-5:* 求数组的元素个数
  #+attr_html: :width 238px
  [[file:images/10705.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0705.c
// Description : 求数组的元素个数

#include <stdio.h>
#include <limits.h>

int main (void)
{

  int    vi[10];
  double vd[25];

  printf("数组 vi 的元素个数为：%u\n", (unsigned)(sizeof(vi)/sizeof(vi[0])));
  printf("数组 vd 的元素个数为：%u\n", (unsigned)(sizeof(vd)/sizeof(vd[0])));

  return 0;
}
#+end_src
+ *ex 7-1:* 创建一个程序，显示下图所示的个表达式的值，同时对个表达式的值加以说明。
  #+attr_html: :width 238px
  [[file:images/10706.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0701.c
// Description : 创建一个程序，显示下图所示的个表达式的值，同时对个表达式的值加以说明。

#include <stdio.h>
#include <limits.h>

#define n 3

int main (void)
{

  printf("sizeof 1           : %u\n"   , (unsigned)sizeof 1);
  printf("sizeof +1          : %u\n"   , (unsigned)sizeof +1);
  printf("sizeof -1          : %u\n\n" , (unsigned)sizeof -1);

  printf("sizeof(unsigned)-1 : %u\n"   , (unsigned)sizeof(unsigned)-1);
  printf("sizeof(double)-1   : %u\n"   , (unsigned)sizeof(double)-1);
  printf("sizeof((double)-1) : %u\n\n" , (unsigned)sizeof((double)-1));

  printf("sizeof n+2         : %u\n"   , (unsigned)sizeof n+2);
  printf("sizeof (n+2)       : %u\n"   , (unsigned)sizeof (n+2));
  printf("sizeof (n+2.0)     : %u\n"   , (unsigned)sizeof(n+2.0));

  return 0;
}
#+end_src
*** 专题 7-3 逻辑运算符和按位逻辑运算符
+ *list 7-6:* 按位运算
  #+attr_html: :width 290px
  [[file:images/10707.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0706.c
// Description : 按位运算（看不懂这段代码）

#include <stdio.h>

// 返回整数 x 中设置的位数
int count_bits (unsigned x)
{
  int bits = 0;
  while (x) {
    if (x & 1U) bits++;
    x >>= 1;
  }
  return bits;
}

// 返回 unsigned 型的位数
int int_bits ()
{
  return count_bits(~0U);
}

// 显示 unsigned 型的位的内容
void print_bits (unsigned x)
{
  int i;
  for (i=int_bits()-1; i>=0; i--)
    putchar(((x>>i) & 1U) ? '1' : '0');
}

int main (void)
{

  unsigned a, b;
  printf("请输入两个非负整数：\n");
  printf("a : ");  scanf("%u", &a);
  printf("b : ");  scanf("%u", &b);

  printf("\na     = ");  print_bits(a);
  printf("\nb     = ");  print_bits(b);
  printf("\na & b = ");  print_bits(a & b); // a 和 b 的逻辑与
  printf("\na | b = ");  print_bits(a | b); // a 和 b 的逻辑或
  printf("\na ^ b = ");  print_bits(a ^ b); // a 和 b 的逻辑异或
  printf("\n~a    = ");  print_bits(~a);    // a 的反码
  printf("\n~b    = ");  print_bits(~b);    // b 的反码
  putchar('\n');

  return 0;
}
#+end_src
*** 位移运算
+ *list 7-7:* 显示对 unsigned 型的值进行左移和右移后的值
  #+attr_html: :width 324px
  [[file:images/10708.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0707.c
// Description : 显示对 unsigned 型的值进行左移和右移后的值

#include <stdio.h>

// 返回整数 x 中设置的位数
int count_bits (unsigned x)
{
  int bits = 0;
  while (x) {
    if (x & 1U) bits++;
    x >>= 1;
  }
  return bits;
}

// 返回 unsigned 型的位数
int int_bits ()
{
  return count_bits(~0U);
}

// 显示 unsigned 型的位的内容
void print_bits (unsigned x)
{
  int i;
  for (i=int_bits()-1; i>=0; i--)
    putchar(((x>>i) & 1U) ? '1' : '0');
}

int main (void)
{

  unsigned x, n;

  printf("请输入一个非负整数 : ");  scanf("%u", &x);
  printf("请输入位移位数     : ");  scanf("%u", &n);

  printf("\n整数       = ");  print_bits(x);
  printf("\n左移后的值 = ");  print_bits(x << n);
  printf("\n右移后的值 = ");  print_bits(x >> n);
  putchar('\n');

  return 0;
}
#+end_src
*** 专题 7-4 逻辑位移和算数位移
+ *ex 7-2:* 编写一个程序，确认只要没有发生高位h溢出，则：
  无符号整数位左移后的值等于其乘以 2 的指数幂后的值。
  无符号整数位右移后的值等于其除以 2 的指数幂后的值。
  #+attr_html: :width 264px
  [[file:images/10709.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0702.c
// Description : 编写一个程序，确认只要没有发生高位溢出，则：
//               无符号整数位左移后的值等于其乘以 2 的指数幂后的值。
//               无符号整数位右移后的值等于其除以 2 的指数幂后的值。

// 此段代码未考虑高位溢出

#include <stdio.h>

// 返回 2 的 n 次幂的值
int aa (int n)
{
  int i;
  int j = 1;
  for (i=1; i<=n; i++) {
    j *= 2;
  }
  return j;
}

int main (void)
{
  unsigned ui;
  int x;

  printf("请输入一个正整数：");
  scanf("%u", &ui);
  printf("请输入移动的位数：");
  scanf("%d", &x);

  printf("%u 向左位移 %d 位的值为   ：%u\n"   , ui , x , ui<<x);
  printf("%u 乘以 2 的 %d 次幂的值为：%u\n\n" , ui , x , ui*aa(x));
  printf("%u 向右位移 %d 位的值为   ：%u\n"   , ui , x , ui>>x);
  printf("%u 除以 2 的 %d 次幂的值为：%u\n"   , ui , x , ui/aa(x));

  return 0;
}
#+end_src
+ *ex 7-3:* 编写 rrotate 函数，返回无符号整数 x 右移 n 位后的值。
  编写 lrotate 函数，返回无符号整数 x 左移 n 位后的值。
  #+attr_html: :width 238px
  [[file:images/10710.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0703.c
// Description : 编写 rrotate 函数，返回无符号整数 x 右移 n 位后的值。
//               编写 lrotate 函数，返回无符号整数 x 左移 n 位后的值。

#include <stdio.h>

// 返回无符号整数 x 左移 n 位后的值
unsigned lrotate (const unsigned x, int n)
{
  unsigned ui;
  ui = x;
  return ui<<n;
}

// 返回无符号整数 x 右移 n 位后的值
unsigned rrotate (const unsigned x, int n)
{
  unsigned ui;
  ui = x;
  return ui>>n;
}

int main (void)
{

  unsigned x;
  int n;

  printf("请输入一个正整数：");
  scanf("%u", &x);
  printf("请输入位移位数：");
  scanf("%d", &n);

  printf("%u 向左位移 %d 位后的值为：%u\n", x, n, lrotate(x, n));
  printf("%u 向右位移 %d 位后的值为：%u\n", x, n, rrotate(x, n));

  return 0;
}
#+end_src
+ *ex 7-4:* 编写 set 函数，返回将无符号整数 x 的第 pos 位设为 1 后的值。
  编写 reset 函数，返回将无符号整数 x 的第 pos 位设为 0 后的值。
  编写 inverse 函数，返回将无符号整数 x 的第 pos 位取反后的值。
  #+attr_html: :width 248px
  [[file:images/10711.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0704.c
// Description : 编写 set 函数，返回将无符号整数 x 的第 pos 位设为 1 后的值。
//               编写 reset 函数，返回将无符号整数 x 的第 pos 位设为 0 后的值。
//               编写 inverse 函数，返回将无符号整数 x 的第 pos 位取反后的值。

#include <stdio.h>

// 返回将无符号整数 x 的第 pos 位设为 1 后的值
unsigned set (const unsigned x, int pos)
{
  unsigned ui;
  ui = x;
  return ui | (1U << (pos-1));    // 二进制的最低位为第 0 位
}

// 返回将无符号整数 x 的第 pos 位设为 0 后的值
unsigned reset (const unsigned x, int pos)
{
  unsigned ui;
  ui = x;
  return ui & ~(1U << (pos-1));
}

// 返回将无符号整数 x 的第 pos 位取反后的值
unsigned inverse (const unsigned x, int pos)
{
  unsigned ui;
  ui = x;
  return ui ^ (1U << (pos-1));
}

int main (void)
{

  unsigned x;
  int pos;

  printf("请输入一个正整数：");
  scanf("%u", &x);
  printf("请输入要改变的位数：");
  scanf("%d", &pos);

  printf("将 %u 的第 %d 位设为 1 后的值为：%u\n", x, pos, set(x, pos));
  printf("将 %u 的第 %d 位设为 0 后的值为：%u\n", x, pos, reset(x, pos));
  printf("将 %u 的第 %d 位取反后的值为   ：%u\n", x, pos, inverse(x, pos));

  return 0;
}
#+end_src
+ *ex 7-5:* 编写 set_n 函数，返回将无符号整数 x 的第 pos 位到第 pos+n-1 位的 n 位设为 1 后的值。
  编写 reset_n 函数，返回将无符号整数 x 的第 pos 位开始的 n 位设为 0 后的值。
  编写 inverse_n 函数，返回将无符号整数 x 的第 pos 位开始的 n 位取反后的值。
  #+attr_html: :width 338px
  [[file:images/10712.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0705.c
// Description : 编写 set_n 函数，返回将无符号整数 x 的第 pos 位到第 pos+n-1 位的 n 位设为 1 后的值。
//               编写 reset_n 函数，返回将无符号整数 x 的第 pos 位开始的 n 位设为 0 后的值。
//               编写 inverse_n 函数，返回将无符号整数 x 的第 pos 位开始的 n 位取反后的值。

#include <stdio.h>

// 编写 set_n 函数，返回将无符号整数 x 的第 pos 位到第 pos+n-1 位的 n 位设为 1 后的值。
unsigned set_n (const unsigned x, int pos, int n)
{
  unsigned ui=x, uk=1;
  int i;

  for (i=1; i<=n; i++)
    uk *= 2;
  uk -= 1;

  return ui | (uk << (pos-1));
}

// 返回将无符号整数 x 的第 pos 位开始的 n 位设为 0 后的值。
unsigned reset_n (const unsigned x, int pos, int n)
{
  unsigned ui=x, uk=1;
  int i;

  for (i=1; i<=n; i++)
    uk *=2;
  uk -= 1;

  return ui & ~(uk << (pos-1));
}

// 返回将无符号整数 x 的第 pos 位开始的 n 位取反后的值。
unsigned inverse_n (const unsigned x, int pos, int n)
{
  unsigned ui=x, uk=1;
  int i;

  for (i=1; i<=n; i++)
    uk *= 2;
  uk -= 1;

  return ui ^ (uk << (pos-1));
}

int main (void)
{
  unsigned x;
  int pos;
  int n;

  printf("请输入一个正整数：");
  scanf("%u", &x);
  printf("请输入开始位：");
  scanf("%d", &pos);
  printf("请输入修改几位：");
  scanf("%d", &n);

  printf("%u 的第 %d 位开始的 %d 位设为 1 后的值为：%u\n", x, pos, n, set_n(x, pos, n));
  printf("%u 的第 %d 位开始的 %d 位设为 0 后的值为：%u\n", x, pos, n, reset_n(x, pos, n));
  printf("%u 的第 %d 位开始的 %d 位取反后的值为   ：%u\n", x, pos, n, inverse_n(x, pos, n));


  return 0;
}
#+end_src
*** 整数的显示
+ *list 7-8:* 以十进制、二进制、八进制和十六进制显示 0~65535
  #+attr_html: :width 254px
  [[file:images/10713.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0708.c
// Description : 以十进制、二进制、八进制和十六进制显示 0~65535

//     Charset : UTF-8(LF)
//   File Name : chap07/list0707.c
// Description : 显示对 unsigned 型的值进行左移和右移后的值

#include <stdio.h>

// 返回整数 x 中设置的位数
int count_bits (unsigned x)
{
  int bits = 0;
  while (x) {
    if (x & 1U) bits++;
    x >>= 1;
  }
  return bits;
}

// 返回 unsigned 型的位数
int int_bits ()
{
  return count_bits(~0U);
}

// 显示 unsigned 型整数 x 的后 n 位
void print_nbits (unsigned x, unsigned n)
{
  int i = int_bits();
  i = (n < i) ? n-1 : i-1;
  for ( ; i>=0; i--)
    putchar(((x>>i) & 1U) ? '1' : '0');
}

int main (void)
{

  unsigned i;

  for (i=0; i<=65535U; i++) {
    printf("%5u ", i);
    print_nbits(i, 16);
    printf(" %06o %04X\n", i, i);
  }

  return 0;
}
#+end_src
*** 数据溢出和异常
+ *ex 7-6:* 编写程序确认对无符号整数执行算术运算不会发生数据溢出。
  #+attr_html: :width 274px
  [[file:images/10714.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0706.c
// Description : 编写程序确认对无符号整数执行算术运算不会发生数据溢出。

#include <stdio.h>
#include <limits.h>

int main (void)
{
  unsigned ui;
  printf("无符号整型的最大值为：%u\n", UINT_MAX);
  printf("请输入一个正整数：");
  scanf("%u", &ui);

  printf("无符号整型的最大值加上 %u 的结果是：%u\n", ui, UINT_MAX+ui);

  return 0;
}
#+end_src
** 7-3: 浮点型
*** 浮点型
+ *list 7-9:* 表示浮点型变量的值（运行结果因编译器而异）
  #+attr_html: :width 296px
  [[file:images/10715.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0709.c
// Description : 表示浮点型变量的值（运行结果因编译器而异）

#include <stdio.h>

int main (void)
{
  float       a = 123456789012345678901234567890.0;
  double      b = 123456789012345678901234567890.0;
  long double c = 123456789012345678901234567890.0;

  printf("a = %f\n", a);
  printf("b = %f\n", b);
  printf("c = %lf\n", c);
  //           ^--- 只有 long double 型的显示使用 lf 而非 f
  return 0;
}
#+end_src
*** 浮点型常量
+ *ex 7-7:* 创建一个程序，从键盘输入 float 型、double 型、long double 型的变量，
  并显示其值。注意试着输入各种各样的值，并验证其动作。
  #+attr_html: :width 264px
  [[file:images/10716.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0707.c
// Description : 创建一个程序，从键盘输入 float 型、double 型、long double 型的变量，
//               并显示其值。注意试着输入各种各样的值，并验证其动作。

#include <stdio.h>

int main (void)
{
  float f;
  double d;
  long double ld;

  printf("请输入三个实数：\n");
  printf("使用 float 类型存储 f：");
  scanf("%f", &f);
  printf("使用 double 类型存储 d：");
  scanf("%lf", &d);
  printf("使用 long double 类型存储 ld：");
  scanf("%Lf", &ld);

  printf("f(float) : %f\nd(double) : %f\nld(long double) : %Lf\n", f, d, ld);

  return 0;
}
#+end_src
*** <math.h> 头文件
+ *list 7-10:* 求出两点之间的距离
  #+attr_html: :width 238px
  [[file:images/10717.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0710.c
// Description : 求出两点之间的距离

// 编译这个程序时需要添加 -lm 参数，用于链接 math 数学库。例如：
// clang c.c -lm 或 clang -lm c.c
// gcc c.c -lm

#include <stdio.h>
#include <math.h>

// 求出点 (x1, y1) 和点 (x2, y2) 之间的距离
double dist (double x1, double y1, double x2, double y2)
{
  return sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
}

int main (void)
{
  double x1, y1;                // 点 1
  double x2, y2;                // 点 2

  printf("求两点之间的距离：\n");
  printf("点 1 ··· x 坐标：");  scanf("%lf", &x1);
  printf("         y 坐标：");  scanf("%lf", &y1);
  printf("点 2 ··· x 坐标：");  scanf("%lf", &x2);
  printf("         y 坐标：");  scanf("%lf", &y2);

  printf("两点之间的距离为：%lf\n", dist(x1, y1, x2, y2));
  return 0;
}
#+end_src
+ *ex 7-8:* 创建一个程序，使用 sizeof 运算符显示 3 种浮点型的长度。
  #+attr_html: :width 238px
  [[file:images/10718.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0708.c
// Description : 创建一个程序，使用 sizeof 运算符显示 3 种浮点型的长度。

#include <stdio.h>

int main (void)
{
  float       a;
  double      d;
  long double ld;

  printf("float : %d\ndouble : %d\nlong double : %d\n",
         (unsigned)sizeof(a), (unsigned)sizeof(d), (unsigned)sizeof(ld));

  return 0;
}
#+end_src
+ *ex 7-9:* 创建一个程序，输入一个实数作为面积，求面积为该实数的正方形的长。
  #+attr_html: :width 238px
  [[file:images/10719.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0709.c
// Description : 创建一个程序，输入一个实数作为面积，求面积为该实数的正方形的长。

// 编译此文件时需要添加 -lm 参数来链接 math 库：
// clang c.c -lm

#include <stdio.h>
#include <math.h>

int main (void)
{
  double d;

  printf("请输入一个正方形的面积：");
  scanf("%lf", &d);

  printf("此正方形的边长是：%lf\n", sqrt(d));

  return 0;
}
#+end_src
*** 循环的控制
+ *list 7-11:* 以 0.01 为单位从 0.0 递增至 1.0 的循环
  #+attr_html: :width 238px
  [[file:images/10720.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0711.c
// Description : 以 0.01 为单位从 0.0 递增至 1.0 的循环

// 因为运算结果取决于 float 型的精度，因此运行结果因编译器而异

#include <stdio.h>

int main (void)
{
  float x;

  for (x=0.0; x<=1.0; x+=0.01)
    printf("x = %f\n", x);

  return 0;
}
#+end_src
+ *list 7-12:* 以 0.01 为单位从 0.0 递增至 1.0 的循环（用整数控制）
  #+attr_html: :width 238px
  [[file:images/10721.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/list0712.c
// Description : 以 0.01 为单位从 0.0 递增至 1.0 的循环（用整数控制）

#include <stdio.h>

int main (void)
{

  int   i;
  float x;

  for (i=0; i<=100; i++) {
    x = i/100.0;
    printf("x = %f\n", x);
  }

  return 0;
}
#+end_src
+ *ex 7-10:* 创建一个程序，横向显示 list 7-11(chap07/list0711.c) 中以 0.01 为
  单位将 float 型变量由 0.0 递增为 1.0 的过程，以及 list 7-12(chap07/list0712.c) 中将 int 型
  变量由 0 递增到 100，并求其除以 100.0 后所得值的过程。
  #+attr_html: :width 238px
  [[file:images/10722.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0710.c
// Description : 创建一个程序，横向显示 list 7-11(chap07/list0711.c) 中以 0.01 为
//               单位将 float 型变量由 0.0 递增为 1.0 的过程，以及 list 7-12(chap07/list0712.c) 中将 int 型
//               变量由 0 递增到 100，并求其除以 100.0 后所得值的过程。

#include <stdio.h>

int main (void)
{

  int   i;
  float f=0.0, k;

  for (i=0; i<=100; i++) {
    printf("x = %f", f);
    f += 0.01;
    k = i/100.0;
    printf("    x = %f\n", k);
  }

  return 0;
}
#+end_src
+ *ex 7-11:* 创建一个程序，分别对 list 7-11(chap07/list0711.c) 和 list 7-12(chap07/0712.c) 进行改写，
  从 0.0 递增到 1.0，每次递增 0.01，求递增后的所有值的累计。注意对比此二者的运行结果。
  #+attr_html: :width 238px
  [[file:images/10723.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/ex0711.c
// Description : 创建一个程序，分别对 list 7-11(chap07/list0711.c) 和 list 7-12(chap07/0712.c) 进行改写，
//               从 0.0 递增到 1.0，每次递增 0.01，求递增后的所有值的累计。注意对比此二者的运行结果。

#include <stdio.h>

int main (void)
{
  int i;
  float f, f1, f2;

  for (f=0.0; f<=1.0; f+=0.01) {
    f1 += f;
  }
  for (i=0; i<=100; i++) {
    f2 += i/100.0;
  }

  printf("f1 : %f\nf2 : %f\n", f1, f2);

  return 0;
}
#+end_src
** 总结
+ *总结：*
  #+attr_html: :width 238px
  [[file:images/10724.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap07/summary.c
// Description : 总结

#include <stdio.h>

int main (void)
{
  int i, no;
  float value;                  // 值
  float sum =0.0f;              // 和

  puts("对浮点数进行多次加法运算：");
  printf("值  ：");  scanf("%f", &value);
  printf("次数：");  scanf("%d", &no);

  for (i=0; i<no; i++)
    sum += value;
  printf("加法运算的结果是 %f\n", sum);

  return 0;
}
#+end_src
* 第 8 章：动手编写各种程序吧
** 8-1: 函数式宏
*** 函数和数据类型
+ *list 8-1:* 整数的平发和浮点数的平方（函数）
  #+attr_html: :width 238px
  [[file:images/10801.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0801.c
// Description : 整数的平发和浮点数的平方（函数）

#include <stdio.h>

// 返回 int 类型 x 的平方
int sqr_int (int x)
{
  return x*x;
}

// 返回 double 类型 x 的平方
double sqr_double (double x)
{
  return x*x;
}

int main (void)
{

  int    i;
  double d;

  printf("请输入一个整数：");
  scanf("%d", &i);
  printf("该整数的平方是：%d\n", sqr_int(i));

  printf("请输入一个实数：");
  scanf("%lf", &d);
  printf("该实数的平方是：%lf\n", sqr_double(d));

  return 0;
}
#+end_src
*** 函数式宏
+ *list 8-2:* 整数的平方和浮点数的平方（函数式宏）
  #+attr_html: :width 238px
  [[file:images/10801.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0802.c
// Description : 整数的平方和浮点数的平方（函数式宏）

#include <stdio.h>

#define sqr(x) ((x) * (x))      // 计算 x 的平方的函数式宏

int main (void)
{

  int    i;
  double d;

  printf("请输入一个整数：");
  scanf("%d", &i);
  printf("该整数的平方是：%d\n", sqr(i));

  printf("请输入一个实数：");
  scanf("%lf", &d);
  printf("该实数的平方是：%lf\n", sqr(d));

  return 0;
}
#+end_src
*** 不带参数的函数式宏
+ *ex 8-1:* 请定义一个函数式宏 diff(x, y)，返回 x、y 二值之差。
  #+attr_html: :width 238px
  [[file:images/10802.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0801.c
// Description : 请定义一个函数式宏 diff(x, y)，返回 x、y 二值之差。

#include <stdio.h>

#define diff(x, y) (((x>y) ? (x-y) : (y-x)))

int main (void)
{

  int i1, i2;

  printf("请输入两个整数：\n");
  printf("整数 1：");  scanf("%d", &i1);
  printf("整数 2：");  scanf("%d", &i2);

  printf("两个整数的差是：%d\n", diff(i1, i2));

  return 0;
}
#+end_src
+ *ex 8-2:* 定义函数式宏 '#define max(x, y) (((x) > (y)) ? (x) : (y))'，其功能为返回 x、y 中的较大值。
  而下面两个使用了该宏的表达式的功能为计算 a、b、c、d 中的最大值。
  'max(max(a, b), max(c, d))' 'max(max(max(a, b), c), d)' ，
  请显示并观察它们是如何展开的。
  #+attr_html: :width 274px
  [[file:images/10803.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0802,c
// Description : 定义函数式宏 '#define max(x, y) (((x) > (y)) ? (x) : (y))'，其功能为返回 x、y 中的较大值。
//               而下面两个使用了该宏的表达式的功能为计算 a、b、c、d 中的最大值。
//               'max(max(a, b), max(c, d))' 'max(max(max(a, b), c), d)' ，
//               请显示并观察它们是如何展开的。

// 使用下面命令可以观察宏展开：
// clang -E c.c 或 clang -E c.c -o c.x

#include <stdio.h>

#define max(x, y) (((x) > (y)) ? (x) : (y))

int main (void)
{

  int a, b, c, d;

  puts("请输入四个整数：");
  printf("整数 a：");  scanf("%d", &a);
  printf("整数 b：");  scanf("%d", &b);
  printf("整数 c：");  scanf("%d", &c);
  printf("整数 d：");  scanf("%d", &d);

  printf("max(max(a, b), max(c, d)) 的结果为：%d\n", max(max(a, b), max(c, d)));
  printf("max(max(max(a, b), c), d) 的结果为：%d\n", max(max(max(a, b), c), d));

  return 0;
}
#+end_src
+ *ex 8-3:* 请定义一个函数式宏 'swap(type, a, b)' 以使 type 型的两值互换。
  例如：假设 int 型变量 x、y 的值分别为 5、10，那么调用 swap(int, x, y) 后，
  x、y 中应分别保存 10、5。
  #+attr_html: :width 238px
  [[file:images/10804.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0803.c
// Description : 请定义一个函数式宏 'swap(type, a, b)' 以使 type 型的两值互换。
//               例如：假设 int 型变量 x、y 的值分别为 5、10，那么调用 swap(int, x, y) 后，
//               x、y 中应分别保存 10、5。

#include <stdio.h>

#define swap(type, a, b) type x; x=a; a=b; b=x;

int main (void)
{

  int    a, b;
  double c, d;

  printf("请输入要互换的两个整数：\n");
  printf("a: ");  scanf("%d", &a);
  printf("b: ");  scanf("%d", &b);
  printf("a 和 b 互换后：\n");
  swap(int, a, b);
  printf("a: %d\n", a);
  printf("b: %d\n", b);

  /*
    printf("请输入要互换的两个实数：\n");
    printf("c: ");  scanf("%lf", &d);
    printf("d: ");  scanf("%lf", &d);
    printf("a 和 b 互换后：\n");
    swap(double, c, d);
    printf("c: %lf\n", c);
    printf("d: %lf\n", d);
  ,*/

  return 0;
}
#+end_src
*** 函数式宏和逗号运算符
+ *list 8-3:* 响铃并显示的宏定义（误例：不可编译、执行）
  #+attr_html: :width 264px
  [[file:images/10805.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0803.c
// Description : 响铃并显示的宏定义（误例：不可编译、执行）

#include <stdio.h>

#define puts_alert(str) { putchar('\a'); puts(str);}

int main (void)
{
  int n;

  printf("请输入一个整数：");
  scanf("%d", &n);

  if (n)
    puts_alert("这个数不是 0。");
  else
    puts_alert("这个数是 0。");

  return 0;
}
#+end_src
+ *list 8-4:* 响铃并显示的宏定义
  #+attr_html: :width 238px
  [[file:images/10806.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0804.c
// Description : 响铃并显示的宏定义

#include <stdio.h>

#define puts_alert(str) (putchar('\a') ,  puts(str))

int main (void)
{
  int n;

  printf("请输入一个整数：");
  scanf("%d", &n);

  if (n)
    puts_alert("这个数不是 0。");
  else
    puts_alert("这个数是 0。");

  return 0;
}
#+end_src
** 8-2: 排序
*** 冒泡排序法
+ *list 8-5:* 读取学生的身高并排序
  #+attr_html: :width 238px
  [[file:images/10807.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0805.c
// Description : 读取学生的身高并排序


#define NUMBER	5		// 人数

// 冒泡排序
void bsort(int a[], int n)
{
	int i, j;

	for (i=0; i<n-1; i++) {
		for (j=n-1; j > i; j--) { // 从后往前排序
			if (a[j-1] > a[j]) {
				int temp = a[j];
				a[j] = a[j-1];
				a[j-1] = temp;
			}
		}
	}
}

int main(void)
{
	int i;
	int height[NUMBER];    // NUMBER 名学生的身高

	printf("请输入%d人的身高。\n", NUMBER);
	for (i = 0; i < NUMBER; i++) {
		printf("%2d号：", i + 1);
		scanf("%d", &height[i]);
	}

	bsort(height, NUMBER); // 排序

	puts("按升序排列。");
	for (i = 0; i < NUMBER; i++)
		printf("%2d号：%d\n", i + 1, height[i]);

	return 0;
}
#+end_src
** 8-3: 枚举类型
*** 枚举类型
+ *list 8-6:* 显示所选动物的叫声
  #+attr_html: :width 268px
  [[file:images/10808.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0806.c
// Description : 显示所选动物的叫声

#include <stdio.h>

enum animal {Dog, Cat, Monkey, Invalid};

// 狗叫
void dog ()
{
  puts("汪汪！！");
}
// 猫叫
void cat ()
{
  puts("喵～！！");
}
// 猴子叫
void monkey ()
{
  puts("唧唧！！");
}

// 选择动物
enum animal select ()
{
  int tmp;

  do {
    printf("0···狗  1···猫  2···猴子 3···结束：");
    scanf("%d",&tmp);
  } while (tmp < Dog || tmp > Invalid);

  return tmp;
}

int main (void)
{

  enum animal selected;

  do {
    switch (selected = select()) {
    case Dog:
      dog();    break;
    case Cat:
      cat();    break;
    case Monkey:
      monkey(); break;
    }
  } while (selected != Invalid);

  return 0;
}
#+end_src
*** 枚举常量
+ *ex 8-4:* 创建一个程序，对 list 8-5(chap08/list0805.c) 进行改写，依然使用冒泡排序法，
  但排序时要按照从前往后的顺序，而非从后往前。
  #+attr_html: :width 238px
  [[file:images/10807.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0804.c
// Description : 创建一个程序，对 list 8-5(chap08/list0805.c) 进行改写，依然使用冒泡排序法，
//               但排序时要按照从前往后的顺序，而非从后往前。

#include <stdio.h>

#define NUMBER 5                // 人数

// 冒泡排序（按升序从小到大排列）
void bsort (int a[], int n)
{
  int i, j, tmp;

  for (i=0; i<n-1; i++) {       // 总共有 n-1 轮
    for (j=0; j<n-i-1; j++) {
      if (a[j] > a[j+1]) {
        tmp = a[j];
        a[j] = a[j+1];
        a[j+1] = tmp;
      }
    }
  }
}

int main (void)
{
  int i;
  int height[NUMBER];           // NUMBER 名学生的身高

  printf("请输入 %d 人的身高：\n", NUMBER);
  for (i=0; i<NUMBER; i++) {
    printf("%d 号：", i+1);
    scanf("%d", &height[i]);
  }

  bsort(height, NUMBER);        // 排序

  puts("按升序排列：");
  for (i=0; i<NUMBER; i++)
    printf("%d 号：%d\n", i+1, height[i]);

  return 0;
}
#+end_src
+ *ex 8-5:* 在程序中定义表示性别、季节等的枚举类型，并有效使用它们。
  #+attr_html: :width 334px
  [[file:images/10809.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0805.c
// Description : 在程序中定义表示性别、季节等的枚举类型，并有效使用它们。

#include <stdio.h>

enum sex    {male, female};
enum season {spring, summer, autumn, winter};

// 选择性别
enum sex select_sex ()
{
  int tmp;

  do {
    printf("0···男  1···女 : ");
    scanf("%d", &tmp);
  } while (tmp<male || tmp>female);

  return tmp;
}

enum season select_season ()
{
  int tmp;

  do {
    printf("0···春天  1···夏天  2···秋天  3···冬天 : ");
    scanf("%d", &tmp);
  } while (tmp<spring || tmp>winter);

  return tmp;
}

int main (void)
{

  enum sex    se;
  enum season sea;

  se = select_sex();
  if (se)
    printf("女\n");
  else
    printf("男\n");

  sea = select_season();
  switch (sea) {
  case spring :
    printf("春天\n"); break;
  case summer :
    printf("夏天\n"); break;
  case autumn :
    printf("秋天\n"); break;
  case winter :
    printf("冬天\n"); break;
  }

  return 0;
}
#+end_src
** 8-4: 递归函数（个人不用，这节跳过）
** 8-5: 输入输出和字符
*** getchar 函数和 EOF
+ *list 8-8:* 将标准输入的数据复制到标准输出
  #+attr_html: :width 510px
  [[file:images/10810.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0808.c
// Description : 将标准输入的数据复制到标准输出

#include <stdio.h>

int main (void)
{

  int ch;

  while ((ch=getchar()) != EOF)
    putchar(ch);

  return 0;
}
#+end_src
*** 数字字符计数
+ *list 8-9:* 计算标准输入流中出现的数字字符数
  #+attr_html: :width 238px
  [[file:images/10811.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0809.c
// Description : 计算标准输入流中出现的数字字符数

#include <stdio.h>

int main (void)
{

  int i, ch;
  int cnt[10] = {0};            // 数字字符的出现次数

  while ((ch=getchar()) != EOF) {
    switch (ch) {
    case '0' : cnt[0]++; break;
    case '1' : cnt[1]++; break;
    case '2' : cnt[2]++; break;
    case '3' : cnt[3]++; break;
    case '4' : cnt[4]++; break;
    case '5' : cnt[5]++; break;
    case '6' : cnt[6]++; break;
    case '7' : cnt[7]++; break;
    case '8' : cnt[8]++; break;
    case '9' : cnt[9]++; break;
    }
  }

  puts("数字字符的出现次数：");
  for (i=0; i<10; i++)
    printf("'%d' : %d\n", i, cnt[i]);

  return 0;
}
#+end_src
+ *ex 8-9:* 创建一个程序，计算标准输入中出现的行数。
  #+attr_html: :width 238px
  [[file:images/10812.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0809.c
// Description : 创建一个程序，计算标准输入中出现的行数。

#include <stdio.h>

int main (void)
{
  int i=0, ch;

  while ((ch=getchar()) != EOF) {
    if (ch == '\n')
      i++;
  }

  printf("输入了 %d 行\n", i);

  return 0;
}
#+end_src
*** 字符
+ *list 8-10:* 计算标准输入流中出现的数字字符数（第 2 版）
  #+attr_html: :width 238px
  [[file:images/10813.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0810.c
// Description : 计算标准输入流中出现的数字字符数（第 2 版）

#include <stdio.h>

int main (void)
{

  int i, ch;
  int cnt[10] = {0};            // 数字字符的出现次数

  while ((ch=getchar()) != EOF) {
    if (ch>='0' && ch<='9')
      cnt[ch - '0']++;
  }

  puts("数字字符的出现次数：");
  for (i=0; i<10; i++)
    printf("'%d' : %d\n", i, cnt[i]);

  return 0;
}
#+end_src
+ *list 8-11:* 显示 EOF 和数字字符的值
  #+attr_html: :width 238px
  [[file:images/10814.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/list0811.c
// Description : 显示 EOF 和数字字符的值

#include <stdio.h>

int main (void)
{
  int i;
  printf("EOF = %d\n", EOF);

  for (i=0; i<10; i++)
    printf("'%d' = %d\n", i, '0'+i);

  return 0;
}
#+end_src
*** 转义字符
+ *ex 8-10:* 改写 list 8-10(chap08/list0810.c) 的程序，将数字字符的出现次数用并排的 * 表示。
  注意 list 5-12(chap05/list0512.c) 以及 ex 5-9(chap05/ex0509.c) 的显示一样。
  #+attr_html: :width 238px
  [[file:images/10815.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/ex0810.c
// Description : 改写 list 8-10(chap08/list0810.c) 的程序，将数字字符的出现次数用并排的 * 表示。
//               注意 list 5-12(chap05/list0512.c) 以及 ex 5-9(chap05/ex0509.c) 的显示一样。

#include <stdio.h>

int main (void)
{
  int i, ch;
  int cnt[10] = {0};

  while (1) {
    ch = getchar();
    if (ch == EOF)
      break;
    if (ch>='0' && ch<='9')
      cnt[ch-'0']++;
  }

  puts("数字字符的出现次数：");

  for (i=0; i<10; i++) {
    printf("'%d' : ", i);

    while (cnt[i]--)
      printf("*");

    putchar('\n');
  }

  return 0;
}
#+end_src
** 总结
+ *总结 1：*
  #+attr_html: :width 238px
  [[file:images/10816.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/summary1.c
// Description : 总结 1

#include <stdio.h>

enum RGB {Red, Green, Blue};

int main (void)
{
  int color;

  printf("0 ~ 2 的值：");  scanf("%d", &color);

  printf("你选择了：");
  switch (color) {
  case 0:
    printf("红色。\n");  break;
  case 1:
    printf("绿色。\n");  break;
  case 2:
    printf("蓝色。\n");  break;
  }

  return 0;
}
#+end_src
+ *总结 2：*
  #+attr_html: :width 238px
  [[file:images/10817.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap08/summary2.c
// Description : 总结 2

#include <stdio.h>

// 响铃
#define alert() (putchar('\a'))
// 显示字符 c 并换行
#define putchar_ln(c) (putchar(c), putchar('\n'))

int main (void)
{
  int ch;
  int sum = 0;                  // 显示所有数字之和

  while ((ch=getchar()) != EOF) {
    if (ch>='0' && ch<='9')
      sum += ch-'0';

    if (ch == '\n') {
      alert();
      putchar('\n');
    } else {
      putchar_ln(ch);
    }
  }
  printf("所有数字之和为 %d。\n", sum);

  return 0;
}
#+end_src
* 第 9 章：字符串的基本知识
** 9-1: 什么是字符串
*** 字符串字面量
+ *list 9-1:* 显示字符串字面量的长度
  #+attr_html: :width 238px
  [[file:images/10901.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0901.c
// Description : 显示字符串字面量的长度

#include <stdio.h>

int main (void)
{

  printf("sizeof(\"123\")      = %u\n", (unsigned)sizeof("123"));
  printf("sizeof(\"AB\\tC\")    = %u\n", (unsigned)sizeof("AB\tC"));
  printf("sizeof(\"abc\\0def\") = %u\n", (unsigned)sizeof("abc\0def"));

  return 0;
}
#+end_src
*** 字符串
+ *list 9-2:* 将字符串存储在数组中并显示（其 1：赋值）
  #+attr_html: :width 238px
  [[file:images/10902.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0902.c
// Description : 将字符串存储在数组中并显示（其 1：赋值）

#include <stdio.h>

int main (void)
{

  char str[4];                  // 保存字符串的数组

  str[0] = 'A';                 // 赋值
  str[1] = 'B';                 // 赋值
  str[2] = 'C';                 // 赋值
  str[3] = '\0';                // 赋值
  //                                  v--- 存储字符串的数组的名称
  printf("字符串 str 为 \"%s\"。\n", str); // 显示
  //                       ^--- 显示字符串的转换说明为 %s
  return 0;
}
#+end_src
*** 字符数组的初始化赋值
+ *list 9-3:* 将字符串存储在数组中并显示（其2：初始化）
  #+attr_html: :width 238px
  [[file:images/10902.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0903.c
// Description : 将字符串存储在数组中并显示（其2：初始化）

#include <stdio.h>

int main (void)
{

  char str[] = "ABC";                      // 初始化

  printf("字符串 str 为 \"%s\"。\n", str); // 显示

  return 0;
}
#+end_src
+ *ex 9-1:* 将 list 9-3(chap09/list0903.c) 中数组 str 的声明改为下面这样，查看程序的运行结果。
  'char str[] = "ABC\0EF"'
  #+attr_html: :width 238px
  [[file:images/10902.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0901.c
// Description : 将 list 9-3(chap09/list0903.c) 中数组 str 的声明改为下面这样，查看程序的运行结果。
//               'char str[] = "ABC\0EF"'

#include <stdio.h>

int main (void)
{

  char str[] = "ABC\0EF";

  printf("字符串 str 为 \"%s\"。\n", str);

  return 0;
}
#+end_src
*** 字符串的读取
+ *list 9-4:* 询问名字并显示问候语（读取字符串）
  #+attr_html: :width 238px
  [[file:images/10903.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0904.c
// Description : 询问名字并显示问候语（读取字符串）

#include <stdio.h>

int main (void)
{
  char name[48];

  printf("请输入您的名字：");
  scanf("%s", name);
  //          ^--- 注意：scanf 函数读取字符串时，不需要 & 符，也不需要 []
  printf("您好，%s 先生/女士！！\n", name);

  return 0;
}
#+end_src
+ *ex 9-2:* 如何让下述初始化值得到的字符串 s 变成空字符串？请编写程序实现。
  'char s[] = "ABC";'
  #+attr_html: :width 238px
  [[file:images/10904.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0902.c
// Description : 如何让下述初始化值得到的字符串 s 变成空字符串？请编写程序实现。
//               'char s[] = "ABC";'

#include <stdio.h>

int main (void)
{

  char s[] = "ABC";

  printf("字符串 s 的初始化值为：\"%s\"。\n", s);

  s[0] = '\0';                   // 让字符串 s 变成空字符串

  printf("现在字符串 s 的值为：\"%s\"。\n", s);

  return 0;
}
#+end_src
*** 格式化显示字符串
+ *list 9-5:* 格式化字符串 "12345" 并显示
  #+attr_html: :width 238px
  [[file:images/10905.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/0905.c
// Description : 格式化字符串 "12345" 并显示

#include <stdio.h>

int main (void)
{

  char str[] = "12345";

  printf("%s\n", str);          // 原样输出
  printf("%3s\n", str);         // 至少显示 3 位
  printf("%.3s\n", str);        // 最多显示 3 位
  printf("%8s\n", str);         // 右对齐
  printf("%-8s\n", str);        // 左对齐

  return 0;
}
#+end_src
** 9-2: 字符串数组
*** 字符串数组
+ *list 9-6:* 字符串数组
  #+attr_html: :width 238px
  [[file:images/10906.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0906.c
// Description : 字符串数组

#include <stdio.h>

int main (void)
{

  int i;
  char cs[][6] = {"Turbo", "NA", "DOHC"};
  //     ^--- 因为有 3 个初始值，所以元素个数是 3 个
  for (i=0; i<3; i++)
    printf("cs[%d] = \"%s\"\n", i, cs[i]);

  return 0;
}
#+end_src
*** 读取字符串数组中的字符串
+ *list 9-7:* 读取并显示字符串数组
  #+attr_html: :width 238px
  [[file:images/10907.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0907.c
// Description : 读取并显示字符串数组

#include <stdio.h>

int main (void)
{

  int i;
  char s[3][128];
  //     ^--- 因为没有初始值，所以元素个数不可省略
  for (i=0; i<3; i++) {
    printf("s[%d] : ", i);
    scanf("%s", s[i]);
  }

  for (i=0; i<3; i++)
    printf("s[%d] = \"%s\"\n", i, s[i]);

  return 0;
}
#+end_src
+ *ex 9-3:* 编写一段程序，对 list 9-7(chap09/list0907.c) 进行如下改写：
  1、将字符串的个数 3 改为更大的数，将其值定义为对象式宏。
  2、在最初的 for 语句读取 "$$$$$" 时停止读取操作。
  3、第二个 for 语句显示 "$$$$$" 前输入的所有字符串。
  #+attr_html: :width 238px
  [[file:images/10908.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0903.c
// Description : 编写一段程序，对 list 9-7(chap09/list0907.c) 进行如下改写：
//               1、将字符串的个数 3 改为更大的数，将其值定义为对象式宏。
//               2、在最初的 for 语句读取 "$$$$$" 时停止读取操作。
//               3、第二个 for 语句显示 "$$$$$" 前输入的所有字符串。

#include <stdio.h>

#define NUMBER 5

int main (void)
{

  int i, j;

  char s[NUMBER][128];

  for (i=0; i<NUMBER; i++) {
    printf("s[%d] : ", i);
    scanf("%s", s[i]);

    for (j=0; s[i][j]!='\0'; j++) {
      if (s[i][j] != '$')
        break;
    }
    if (j == 5)
      break;
  }

  for (i=0; i<NUMBER; i++) {
    for (j=0; s[i][j]!='\0'; j++) {
      if (s[i][j] != '$')
        break;
    }
    if (j == 5)
      break;

    printf("s[%d] = \"%s\"\n", i, s[i]);
  }

  return 0;
}
#+end_src
** 9-3: 字符串处理
*** 字符串长度
+ *list 9-8:* 判断字符串的长度
  #+attr_html: :width 238px
  [[file:images/10909.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0908.c
// Description : 判断字符串的长度

#include <stdio.h>

// 返回字符串 str 的长度
int str_length (const char s[])
{                        // ^--- 不需要接收数组的形参的元素个数
  int len = 0;
  while (s[len])
    len++;
  return len;
}

int main (void)
{

  char str[128];                // 包括 null 字符在内，其可存储 128 个字符

  printf("请输入字符串：");
  scanf("%s", str);

  printf("字符串 \"%s\" 的长度是 %d\n", str, str_length(str));
  //                                     ^---------------^--- 实参只要给出数组名就可以
  return 0;
}
#+end_src
+ *ex 9-4:* 编写一个函数，使字符串 s 为空字符串
  #+attr_html: :width 238px
  [[file:images/10910.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0904.c
// Description : 编写一个函数，使字符串 s 为空字符串

#include <stdio.h>

// 使传入的字符串变为空字符串
void null_string (char s[])
{
  s[0] = '\0';
}

int main (void)
{

  char str[128];

  printf("请输入字符串：");
  scanf("%s", str);

  printf("调用函数前的字符串为 \"%s\"\n", str);
  null_string(str);
  printf("调用函数后的字符串为 \"%s\"\n", str);

  return 0;
}
#+end_src
+ *ex9-5:* 编写如下函数，若字符串 s 中含有字符 c （若含有多个，以先出现的为准），
  则返回该元素的下标值，否则返回 -1。
  'int str_char (const char s[], char c) {}'
  #+attr_html: :width 300px
  [[file:images/10911.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0905.c
// Description : 编写如下函数，若字符串 s 中含有字符 c （若含有多个，以先出现的为准），
//               则返回该元素的下标值，否则返回 -1。
//               int str_char (const char s[], char c) {}

#include <stdio.h>

// 返回字符串 s 中 字符 c 的下标
int str_char (const char s[], char c)
{
  int i = 0;
  while (s[i]) {
    if (s[i] == c)
      return i;
    i++;
  }
  // for (i=0; s[i]!='\0'; i++) {  // 使用此 for 循环代替 while 循环也可以
  //   if (s[i] == c)
  //     return i;
  // }
  return -1;
}

int main (void)
{

  char str[128];
  char c;

  printf("请输入字符串：");
  scanf("%s", str);             // scanf() 不接收回车，只是遇到回车就提交，回车还会在缓存里，
                                // 后面可以跟一个 getchar() 把这个回车吃掉
  getchar();                    // 用来接收上面 scanf 语句的回车，否则回车会直接传到下面的语句
                                // 而 %c 和 getchar() 都会接收这个回车，用户就没有输入机会了
                                // %d %s %f %lf 则不受影响，会忽略这个回车
  printf("请输入要查找的字符：");
  scanf("%c", &c);
  //c = getchar(); // 代替上一句的 scanf 语句也可以

  printf("字符 \"%c\" 在字符串 \"%s\" 中的下标为：%d\n", c, str, str_char(str, c));

  return 0;
}
#+end_src
+ *ex 9-6:* 编写如下函数，返回字符串 s 中字符 c 的个数（没有则返回 0）。
  'int str_chnum (const char s[], char c) {}'
  #+attr_html: :width 260px
  [[file:images/10912.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0906.c
// Description : 编写如下函数，返回字符串 s 中字符 c 的个数（没有则返回 0）。
//               'int str_chnum (const char s[], char c) {}'

#include <stdio.h>

// 返回字符串 s 中包含字符 c 的个数
int str_chnum (const char s[], char c)
{
  int i = 0;
  int j = 0;

  while (s[i]) {
    if (s[i++] == c)
      j++;
  }

  return j;
}

int main (void)
{

  char str[128];
  char c;

  printf("请输入字符串：");
  scanf("%s", str);
  getchar();
  printf("请输入要查找的字符：");
  scanf("%c", &c);

  printf("字符串 \"%s\" 中包含 %d 个字符 \"%c\"\n", str, str_chnum(str, c), c);

  return 0;
}
#+end_src
*** 显示字符串
+ *list 9-9:* 遍历字符串并显示
  #+attr_html: :width 238px
  [[file:images/10913.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0909.c
// Description : 遍历字符串并显示

#include <stdio.h>

// 显示字符串 s（不换行）
void put_string (const char s[])
{
  int i = 0;
  while (s[i])
    putchar(s[i++]);
}

int main (void)
{
  char str[128];

  printf("请输入字符串：");
  scanf("%s", str);

  printf("你输入了：");
  put_string(str);
  putchar('\n');

  return 0;
}
#+end_src
+ *ex 9-7:* 编写如下函数，使字符串 s 显示 n 次。
  'void put_stringn(const char s[], int n) {}'
  例如，若 s 和 n 分别为 "ABC" 和 3，则显示 "ABCABC"。
  #+attr_html: :width 238px
  [[file:images/10914.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0907.c
// Description : 编写如下函数，使字符串 s 显示 n 次。
//               'void put_stringn(const char s[], int n) {}'
//               例如，若 s 和 n 分别为 "ABC" 和 3，则显示 "ABCABC"。

#include <stdio.h>

// 连续输出 n 次 s 字符串
void put_stringn (const char s[], int n)
{
  int i;
  for (i=0; i<n; i++)
    printf("%s", s);
  putchar('\n');
}

int main (void)
{
  char str[128];
  int i;

  printf("请输入字符串：");
  scanf("%s", str);
  printf("请输入次数：");
  scanf("%d", &i);

  put_stringn(str, i);

  return 0;
}
#+end_src
+ *ex 9-8:* 编写如下函数，实现字符串的逆向输出。
  'void put_stringr (const char s[]) {}}'
  例如，将 "SEC" 显示为 "CES"。
  #+attr_html: :width 238px
  [[file:images/10915.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0908.c
// Description : 编写如下函数，实现字符串的逆向输出。
//               'void put_stringr (const char s[]) {}}'
//               例如，将 "SEC" 显示为 "CES"。

#include <stdio.h>

// 将字符串 s 逆向输出
void put_stringr (const char s[])
{
  int i = 0;

  while (s[i])
    i++;

  printf("字符串 \"%s\" 逆向输出为：\"", s);
  for (; i>=0; i--) {
    putchar(s[i]);
  }
  printf("\"\n");
}

int main (void)
{
  char str[128];

  printf("请输入字符串：");
  scanf("%s", str);

  put_stringr(str);

  return 0;
}
#+end_src
*** 数字字符的出现次数
+ *list 9-10:* 计算字符串中数字字符数
  #+attr_html: :width 280px
  [[file:images/10916.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0910.c
// Description : 计算字符串中数字字符数

#include <stdio.h>

// 将字符串 s 中的数字字符存放到数组 cnt
void str_dcount (const char s[], int cnt[])
{
  int i = 0;
  while (s[i]) {
    if (s[i] >= '0' && s[i] <= '9')
      cnt[s[i] - '0']++;
    i++;
  }
}

int main (void)
{

  int  i;
  int  dcnt[10] = {0};          // 分布
  char str[128];                // 字符串

  printf("请输入字符串：");
  scanf("%s", str);

  str_dcount(str, dcnt);

  puts("数字字符的出现次数：");
  for (i = 0; i < 10; i++)
    printf("'%d' : %d\n", i, dcnt[i]);

  return 0;
}
#+end_src
+ *ex 9-9:* 编写如下函数，逆向显示字符串 s 的字符。
  'void rev_string (char s[]) {}'
  例如，若 s 中接收的是 "SEC"，则将其数组更新为 "CES"。
  #+attr_html: :width 238px
  [[file:images/10917.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0909.c
// Description : 编写如下函数，逆向显示字符串 s 的字符。
//               'void rev_string (char s[]) {}'
//               例如，若 s 中接收的是 "SEC"，则将其数组更新为 "CES"。

#include <stdio.h>

// 把字符串 s 逆序
void rev_string (char s[])
{
  int i, j = 0, k;

  while (s[j])
    j++;

  for (i = 0; i < j/2; i++) {
    k = s[i];
    s[i] = s[j-i-1];
    s[j-i-1] = k;
  }
}

int main (void)
{

  char str[128];

  printf("请输入字符串：");
  scanf("%s", str);

  rev_string(str);

  printf("逆序后的字符串为：\"%s\"\n", str);
  return 0;
}
#+end_src
*** 大小写字符转换
+ *list 9-11:* 对字符串中的英文字符进行大小写转换
  #+attr_html: :width 238px
  [[file:images/10918.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0911.c
// Description : 对字符串中的英文字符进行大小写转换

#include <ctype.h>
#include <stdio.h>

// 将字符串中的英文字符转为大写字符
void str_toupper (char s[])
{
  int i = 0;
  while (s[i]) {
    s[i] = toupper(s[i]);
    i++;
  }
}
// 将字符串中的英文字符转为小写字符
void str_tolower (char s[])
{
  int i = 0;
  while (s[i]) {
    s[i] = tolower(s[i]);
    i++;
  }
}

int main (void)
{
  char str[128];

  printf("请输入字符串：");
  scanf("%s", str);

  str_toupper(str);
  printf("转换为大写：%s\n", str);

  str_tolower(str);
  printf("转换为小写：%s\n", str);
}
#+end_src
+ *ex 9-10:* 编写如下函数，将字符串 s 中的数字字符全部删除。
  'void del_digit (char s[]) {}'
  例如传入 "AB1C9" 则返回 "ABC"。
  #+attr_html: :width 238px
  [[file:images/10919.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0910.c
// Description : 编写如下函数，将字符串 s 中的数字字符全部删除。
//               'void del_digit (char s[]) {}'
//               例如传入 "AB1C9" 则返回 "ABC"。

#include <stdio.h>

// 删除字符串 s 中所有数字
void del_digit (char s[])
{
  int i, j;

  for (i = 0; s[i] != '\0'; i++) {
    if (s[i] >= '0' && s[i] <= '9') {
      for (j=i; s[j] != '\0'; j++)
        s[j] = s[j + 1];
      i--;
    }
  }
}

int main (void)
{
  char str[128];

  printf("请输入字符串：");
  scanf("%s", str);

  del_digit(str);

  printf("删除所有数字后的字符串：\"%s\"\n", str);
}
#+end_src
*** 字符串数组的参数传递
+ *list 9-12:* 显示字符串数组（函数版）
  #+attr_html: :width 238px
  [[file:images/10920.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0912.c
// Description : 显示字符串数组（函数版）

#include <stdio.h>

// 显示字符串数组
void put_strary (const char s[][6], int n)
{
  int i;
  for (i = 0; i < n; i++)
    printf("s[%d] = \"%s\"\n", i, s[i]);
}

int main (void)
{

  char cs[][6] = {"Turbo", "NA", "DOHC"};

  put_strary(cs, 3);

  return 0;
}
#+end_src
+ *list 9-13:* 显示字符串数组（函数版：逐字符遍历）
  #+attr_html: :width 238px
  [[file:images/10920.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/list0913.c
// Description : 显示字符串数组（函数版：逐字符遍历）

#include <stdio.h>

// 显示字符串数组（逐个字符显示）
void put_strary2 (const char s[][6], int n)
{
  int i;

  for (i = 0; i < n; i++) {
    int j = 0;
    printf("s[%d] = \"", i);
    while (s[i][j])
      putchar(s[i][j++]);
    puts("\"");
  }
}

int main (void)
{

  char str[][6] = {"Turbo", "NA", "DOHC"};

  put_strary2(str, 3);

  return 0;
}
#+end_src
+ *ex 9-11:* 编写一段程序，对 list 9-12(chap09/list0912.c) 进行如下改写：
  1、将字符串的个数 3 改为更大的数，将其值定义为对象式宏。
  2、将字符串的字符数 6 改为 128， 将其值也定义为对象式宏。
  3、生成读取字符串数组的函数。和 ex 9-3(chap09/ex0903.c) 一样，在读取 "$$$$$" 时停止读取操作。
  4、显示 "$$$$$" 前输入的所有字符串。
  #+attr_html: :width 238px
  [[file:images/10921.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0911.c
// Description : 编写一段程序，对 list 9-12(chap09/list0912.c) 进行如下改写：
//               1、将字符串的个数 3 改为更大的数，将其值定义为对象式宏。
//               2、将字符串的字符数 6 改为 128， 将其值也定义为对象式宏。
//               3、生成读取字符串数组的函数。和 ex 9-3(chap09/ex0903.c) 一样，在读取 "$$$$$" 时停止读取操作。
//               4、显示 "$$$$$" 前输入的所有字符串。

#include <stdio.h>
#include <string.h>

#define NUMBERA 4
#define NUMBERB 128

// 显示字符串数组
void put_strary (const char s[][NUMBERB], int n)
{
  int i;
  for (i = 0; i < n; i++) {
    if (strcmp(s[i], "$$$$$") == 0)
      break;
    printf("s[%d] = \"%s\"\n", i, s[i]);
  }
}

int main (void)
{

  char str[NUMBERA][NUMBERB];
  int i;

  printf("请输入 %d 个字符串：\n", NUMBERA);
  for (i = 0; i < NUMBERA; i++) {
    printf("s[%d] : ", i);
    scanf("%s", str[i]);
    if (strcmp(str[i], "$$$$$") == 0)
      break;
  }

  puts("---------------------");
  put_strary(str, NUMBERA);

  return 0;
}
#+end_src
+ *ex 9-12:* 编写如下函数，将所接收的字符串数组中存储的 n 个字符串的字符逆向显示。
  'void rev_string (char s[] [128], int n) {}'
  例如，若 s 中接收的是 {"SEC", "ABC"}，则将其更新为 {"CES", "CBA"}。
  #+attr_html: :width 238px
  [[file:images/10922.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/ex0912.c
// Description : 编写如下函数，将所接收的字符串数组中存储的 n 个字符串的字符逆向显示。
//               'void rev_string (char s[] [128], int n) {}'
//               例如，若 s 中接收的是 {"SEC", "ABC"}，则将其更新为 {"CES", "CBA"}。

#include <stdio.h>

// 将字符串数组 s 中的每个字符串的字符逆向显示
void rev_string (char s[][128], int n)
{
  int i, j, k, l;

  for (i = 0; i < n; i++) {
    for (j = 0; s[i][j] != '\0'; j++);
    for (k = 0; k < j/2; k++) {
      l = s[i][k];
      s[i][k] = s[i][j-k-1];
      s[i][j-k-1] = l;
    }
  }
}

int main (void)
{
  int i, j = 2;
  char str[][128] = {"SEC", "ABC"};

  for (i = 0; i < j; i++)
    printf("逆序之前 str[%d] = \"%s\"\n", i, str[i]);

  rev_string(str, j);

  puts("--------------------------");
  for (i = 0; i < j; i++)
    printf("逆序之后 str[%d] = \"%s\"\n", i, str[i]);

  return 0;
}
#+end_src
** 总结
+ *总结：*
  #+attr_html: :width 274px
  [[file:images/10923.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap09/summary.c
// Description : 遍历字符串并显示

#include <stdio.h>

#define STR_LENGTH	128		// 字符串的最大长度（包括null字符）

// 显示字符串 s 及其构成字符
void put_string_rep(const char s[])
{
	int i = 0;

	while (s[i])
		putchar(s[i++]);

	printf("   { ");

	i = 0;
	while (s[i]) {
		putchar('"');
		putchar(s[i++]);
		printf("' ");
	}

	printf("'\\0' }\n");
}

int main(void)
{
	int i;
	char s[STR_LENGTH];
	char ss[5][STR_LENGTH];

	printf("字符串 s ：");
	scanf("%s", s);

	printf("请输入 5 个字符串。\n");
	for (i = 0; i < 5; i++) {
		printf("ss[%d] ：", i);
		scanf("%s", ss[i]);
	}

	printf("字符串 s ：");
	put_string_rep(s);

	printf("字符串数组 ss ：\n");
	for (i = 0; i < 5; i++) {
		printf("ss[%d]：", i);
		put_string_rep(ss[i]);
	}

	return 0;
}
#+end_src
* 第 10 章：指针
** 10-1: 指针
*** 函数的参数
+ *list 10-1:* 计算两个整数的和与差（误例）
  #+attr_html: :width 238px
  [[file:images/11001.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1001.c
// Description : 计算两个整数的和与差（误例）

#include <stdio.h>

// 将 n1 和 n2 的和、差分别保存至 sum、biff（误例）
void sum_diff (int n1, int n2, int sum, int diff)
{
  sum  = n1 + n2;                       // 和
  diff = (n1 > n2) ? n1 - n2 : n2 - n1; // 差
}

int main (void)
{

  int na, nb;
  int wa = 0, sa = 0;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &na);
  printf("整数 B：");  scanf("%d", &nb);

  sum_diff(na, nb, wa, sa);

  printf("两数之和为 %d，之差为 %d\n", wa, sa);

  return 0;
}
#+end_src
*** 取址运算符
+ *list 10-2:* 显示对象的地址
  #+attr_html: :width 238px
  [[file:images/11002.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1002.c
// Description : 显示对象的地址

#include <stdio.h>

int main (void)
{

  int n;
  int x;
  int a[3];

  printf("n    的地址：%p\n", &n);
  printf("x    的地址：%p\n", &x);
  printf("a[0] 的地址：%p\n", &a[0]);
  printf("a[1] 的地址：%p\n", &a[1]);
  printf("a[2] 的地址：%p\n", &a[2]);

  return 0;
}
#+end_src
*** 指针
+ *list 10-3:* 通过指针间接的操作身高
  #+attr_html: :width 238px
  [[file:images/11003.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1003.c
// Description : 通过指针间接的操作身高

#include <stdio.h>

int main (void)
{

  int sato   = 178;             // 佐藤的身高
  int sanaka = 175;             // 佐中的身高
  int masaki = 179;             // 真崎的身高

  int *isako, *hiroko;

  isako  = &sato;               // isako 指向 sato（喜欢佐藤）
  hiroko = &masaki;             // hiroko 指向 masaki（喜欢真崎）

  printf("伊沙子喜欢的人的身高：%d\n", *isako);
  printf("洋子喜欢的人的身高  ：%d\n", *hiroko);

  isako = &sanaka;              // isako 指向 sanaka（移情别恋）

  ,*hiroko = 180;                // 将 hiroko 指向的对象赋值为 180，修改了洋子喜欢的人的身高

  putchar('\n');
  printf("佐藤的身高：%d\n", sato);
  printf("佐中的身高：%d\n", sanaka);
  printf("真崎的身高：%d\n", masaki);
  printf("伊沙子喜欢的人的身高：%d\n", *isako);
  printf("洋子喜欢的人的身高  ：%d\n", *hiroko);

  return 0;
}
#+end_src
** 指针和函数
*** 作为函数参数的指针
+ *list 10-4:* 通过指针间接修改身高
  #+attr_html: :width 238px
  [[file:images/11004.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1004.c
// Description : 通过指针间接修改身高

#include <stdio.h>

// 洋子（让身高不到 180 的人长到 180）
void hiroko (int *height)
{
  if (*height < 180)
    ,*height = 180;
}

int main (void)
{

  int sato = 178;               // 佐藤的身高
  int sanaka = 175;             // 佐中的身高
  int masaki = 179;             // 真崎的身高

  hiroko(&masaki);

  printf("佐藤的身高：%d\n", sato);
  printf("佐中的身高：%d\n", sanaka);
  printf("真崎的身高：%d\n", masaki);

  return 0;
}
#+end_src
*** 计算和与差
+ *list 10-5:* 计算两个整数的和与差
  #+attr_html: :width 238px
  [[file:images/11005.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1005.c
// Description : 计算两个整数的和与差

#include <stdio.h>

// 将 n1 和 n2 的和、差分别保存至 *sum 和 *diff
void sum_diff (int n1, int n2, int *sum, int *diff)
{
  ,*sum  = n1 + n2;
  ,*diff = (n1 > n2) ? n1 - n2 : n2 - n1;
}

int main (void)
{

  int na, nb;
  int wa = 0, sa = 0;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &na);
  printf("整数 B：");  scanf("%d", &nb);

  sum_diff(na, nb, &wa, &sa);

  printf("两数之和是 %d，之差是 %d\n", wa, sa);

  return 0;
}
#+end_src
*** 二值互换
+ *list 10-6:* 将两个整数值互换
  #+attr_html: :width 238px
  [[file:images/11006.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1006.c
// Description : 将两个整数值互换

#include <stdio.h>

// 将 px、py 指向的对象的值进行互换
void swap (int *px, int *py)
{
  int tmp = *px;
  ,*px = *py;
  ,*py = tmp;
}

int main (void)
{

  int na, nb;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &na);
  printf("整数 B：");  scanf("%d", &nb);

  swap(&na, &nb);

  puts("互换了两数的值：");
  printf("整数 A 是 %d\n", na);
  printf("整数 B 是 %d\n", nb);

  return 0;
}
#+end_src
+ *ex 10-1:* 编写函数 adjust_point，如果 n 指向的值小于 0，就将其改为 0，
  如果值大于 100，就将其改为 100（如果是 0~100 的值，则不修改）。
  'void adjust_point (int *n) {}'
  #+attr_html: :width 238px
  [[file:images/11007.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/ex1001.c
// Description : 编写函数 adjust_point，如果 n 指向的值小于 0，就将其改为 0，
//               如果值大于 100，就将其改为 100（如果是 0~100 的值，则不修改）。
//               'void adjust_point (int *n) {}'

#include <stdio.h>

// 判断 n 所指向对象的值，并修改
void adjust_point (int *n)
{
  if (*n < 0)
    ,*n = 0;
  if (*n > 100)
    ,*n = 100;
}

int main (void)
{

  int n;

  printf("请输入一个整数：");
  scanf("%d", &n);

  adjust_point(&n);

  printf("经过处理后 n 的值：%d\n", n);

  return 0;
}
#+end_src
+ *ex 10-2:* 编写如下函数，将 *y 年 *m 月 *d 日的日期，修改为其前一天或后一天的日期。
  'void decrement_date (int *y, int *m, int *d) {}'
  'void increment_date (int *y, int *m, int *d) {}'
  注意计算时要考虑到闰年的问题。
  #+attr_html: :width 274px
  [[file:images/11008.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/ex1002.c
// Description : 编写如下函数，将 *y 年 *m 月 *d 日的日期，修改为其前一天或后一天的日期。
//               'void decrement_date (int *y, int *m, int *d) {}'
//               'void increment_date (int *y, int *m, int *d) {}'
//               注意计算时要考虑到闰年的问题。

#include <stdio.h>

// 判断 y 是否是闰年，如果是返回 1，否则返回 0
int years (int y)
{
  int i = 0;
  if ((y) % 400 == 0 || ((y) % 100 !=0 && (y) % 4 ==0))
    i = 1;
  return i;
}

// 判断 y 年 m 月的天数并返回
int days (int y, int m)
{
  int i = 0;
  switch (m) {
  case 4:
  case 6:
  case 9:
  case 11:
    i = 30;
    break;
  case 2:
    if (years(y))
      i = 29;
    else
      i = 28;
    break;
  default :
    i = 31;
  }
  return i;
}

// 修改为前一天
void decrement_date (int *y, int *m, int *d)
{
  (*d)--;                    // 减去一天

  if (*d == 0) {             // 如果减去一天为 0，则之前一天为上月的最后一天
    (*d) = days(*y, --(*m)); // 月份减一
    if (*m == 0) {           // 如果月份减一后为 0，则为去年的最后一个月
      (*y)--;                // 年份减一
      ,*m = 12;               // 月份为最后一个月
    }
  }

}

// 修改为后一天
void increment_date (int *y, int *m, int *d)
{
  (*d)++;                    // 加一天

  if ((*d) > days(*y, *m)) { // 如果加一天大于本月的天数，则之后一天为下月的第一天
    ,*d = 1;
    (*m)++;                  // 月份加一
    if (*m > 12) {           // 如果月份加一之后大于 12，则为下一年的一月份
      ,*m = 1;
      (*y)++;                // 年份加一
    }
  }
}

int main (void)
{

  int y, m, d;

  puts("请输入日期(例如：1999 年 2 月 15 日)：");
  printf("年：");  scanf("%d", &y);
  printf("月：");  scanf("%d", &m);
  printf("日：");  scanf("%d", &d);

  printf("输入的日期为：%d 年 %d 月 %d 日\n", y, m, d);

  decrement_date(&y, &m, &d);
  printf("减去一天后的日期为：%d 年 %d 月 %d 日\n", y, m, d);

  increment_date(&y, &m, &d);   // 注意：这里需要调用两次加一天，因为上面的 decrement_date() 函数已经减去一天了
  increment_date(&y, &m, &d);
  printf("加上一天后的日期为：%d 年 %d 月 %d 日\n", y, m, d);

  return 0;
}
#+end_src
*** 将两个值排序
+ *list 10-7:* 将两个整数值按升序排列
  #+attr_html: :width 238px
  [[file:images/11009.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/1007.c
// Description : 将两个整数值按升序排列

#include <stdio.h>

// 将 px，py 所指向对象的值进行互换
void swap (int *px, int *py)
{
  int tmp = *px;
  ,*px = *py;
  ,*py = tmp;
}

// 排列顺序为 *n1 <= *n2
void sort2 (int *n1, int *n2)
{
  if (*n1 > *n2)
    swap(n1, n2);               // n1 和 n2 不需要 *
}

int main (void)
{

  int na, nb;

  puts("请输入两个整数：");
  printf("整数 A：");  scanf("%d", &na);
  printf("整数 B：");  scanf("%d", &nb);

  sort2(&na, &nb);

  puts("将两数的值按升序排序：");
  printf("整数 A：%d\n", na);
  printf("整数 B：%d\n", nb);

  return 0;
}
#+end_src
*** scanf 函数和指针
+ *ex 10-3:* 编写如下函数，将 n1、n2、n3 指向的三个 int 型整数按升序排列。
  'void sort3(int *n1, int *n2, int *n3) {}'
  #+attr_html: :width 238px
  [[file:images/11010.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/ex1003.c
// Description : 编写如下函数，将 n1、n2、n3 指向的三个 int 型整数按升序排列。
//               'void sort3(int *n1, int *n2, int *n3) {}'

#include <stdio.h>

// 交换两个整数
void swap (int *n1, int *n2)
{
  int tmp = *n1;
  ,*n1 = *n2;
  ,*n2 = tmp;
}

// 对三个整数进行升序排列赋值
void sort3 (int *n1, int *n2, int *n3)
{
  if (*n1 > *n2)
    swap(n1, n2);
  if (*n1 > *n3)
    swap(n1, n2);
  if (*n2 > *n3)
    swap(n2, n3);
}

int main (void)
{

  int na, nb, nc;
  puts("请输入三个整数：");
  printf("整数 A：");  scanf("%d", &na);
  printf("整数 B：");  scanf("%d", &nb);
  printf("整数 C：");  scanf("%d", &nc);

  sort3(&na, &nb, &nc);

  printf("升序排序后：\n整数 A：%d\n整数 B：%d\n整数 C：%d\n", na, nb, nc);

  return 0;
}
#+end_src
*** 指针的类型
+ *list 10-8:* 将两个实数值进行互换（误例）
  #+attr_html: :width 238px
  [[file:images/11011.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1008.c
// Description : 将两个实数值进行互换（误例）

// clang 编译器会报 warning，运行结果肯定不对，但是也很奇怪

#include <stdio.h>

// 将 px、py 所指对象的值进行互换
void swap (int *px, int *py)
{
  int tmp = *px;
  ,*px = *py;
  ,*py = tmp;
}

int main (void)
{
  double da, db;

  puts("请输入两个实数：");
  printf("实数 A：");  scanf("%lf", &da);
  printf("实数 B：");  scanf("%lf", &db);

  swap(&da, &db);

  puts("互换了两数的值：");
  printf("实数 A：%f\n", da);
  printf("实数 B：%f\n", db);

  return 0;
}
#+end_src
*** 专题 10-1 取不到地址的对象
+ *list reqister:* 使用 register 关键字声明的寄存器对象，不能使用取址运算符 &，编译时会报错
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/register.c
// Description : 使用 register 关键字声明的寄存器对象，不能使用取址运算符 &，编译时会报错

#include <stdio.h>

int main(void)
{
	register int x;

	printf("%p\n", &x);           // 编译时会报错

	return 0;
}
#+end_src
** 指针和数组
*** 专题 10-2 数组名在什么情况下不被视为指向起始元素的指针
+ *list 10-9:* 显示数组元素的地址（指向元素的指针）
  #+attr_html: :width 340px
  [[file:images/11012.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1009.c
// Description : 显示数组元素的地址（指向元素的指针）

#include <stdio.h>

int main (void)
{
  int i;
  int a[5] = {1, 2, 3, 4, 5};
  int *p = a;                   // p 指向 a[0]

  for (i = 0; i < 5; i++)
    printf("&a[%d] = %p, p + %d = %p\n", i, &a[i], i, p+i);

  return 0;
}
#+end_src
*** 指针运算符和下标运算符
+ *list 10-10:* 显示数组元素的值和地址
  #+attr_html: :width 698px
  [[file:images/11013.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1010.c
// Description : 显示数组元素的值和地址

#include <stdio.h>

int main (void)
{

  int i;
  int a[5] = {1, 2, 3, 4, 5};
  int *p = a;                   // p 指向 a[0]

  for (i = 0; i < 5; i++)
    printf("a[%d] = %d , *(a + %d) = %d , p[%d] = %d , *(p + %d) = %d\n",
           i, a[i], i, *(a + i), i, p[i], i, *(p + i));

  for (i = 0; i < 5; i++)
    printf("&a[%d] = %p , a + %d = %p , &p[%d] = %p , p + %d = %p\n",
           i, &a[i], i, (a + i), i, &p[i], i, (p + i));

  return 0;
}
#+end_src
*** 专题 10-3 下标运算符的操作数
+ *list 10C-1:* 下标运算符和指针运算符
  #+attr_html: :width 238px
  [[file:images/11014.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/listC1001.c
// Description : 下标运算符和指针运算符

#include <stdio.h>

int main (void)
{

  int i, a[4];
  0[a] = a[1] = *(a + 2) = *(3 + a) = 7;

  for (i = 0; i < 4; i++)
    printf("a[%d] = %d\n", i, a[i]);

  return 0;
}
#+end_src
*** 数组的传递
+ *list 10-11:* 数组的传递
  #+attr_html: :width 238px
  [[file:images/11015.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/list1011.c
// Description : 数组的传递

#include <stdio.h>

// 将数组 v 的前 n 个元素赋值为 val
void ary_set (int v[], int n, int val)
{
  int i;
  for (i = 0; i < n; i++)
    v[i] = val;
}

int main (void)
{
  int i;
  int a[] = {1, 2, 3, 4, 5};

  ary_set(a, 5, 99);

  for (i = 0; i < 5; i++)
    printf("a[%d] = %d\n", i, a[i]);

  return 0;
}
#+end_src
+ *ex 10-4:* 编写如下 set_idx 函数，接收元素类型为 int 型、元素个数为 n 的数组，
  并为所有元素赋上和下标相同的值。
  'void set_idx (int *v, int n) {}'
  #+attr_html: :width 238px
  [[file:images/11016.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/ex1004.c
// Description : 编写如下 set_idx 函数，接收元素类型为 int 型、元素个数为 n 的数组，
//               并为所有元素赋上和下标相同的值。
//               'void set_idx (int *v, int n) {}'

#include <stdio.h>

void set_idx (int *v, int n)
{
  int i;
  for (i = 0; i < n; i++)
    v[i] = i;
}

int main (void)
{
  int i;
  int v[5] = {1, 2, 3, 4, 5};

  puts("调用 set_idx 函数之前：");
  for (i = 0; i < 5; i++)
    printf("v[%d] = %d\n", i, v[i]);

  set_idx(v, 5);

  puts("调用 set_idx 函数之后：");
  for (i = 0; i < 5; i++)
    printf("v[%d] = %d\n", i, v[i]);

  return 0;
}
#+end_src
+ *ex 10-5:* 如果用 'ary_set (&a[2], 2, 99)' 调用 list 10-11(chap10/list1011.c) 中的 ary_set 函数会怎么样？
  #+attr_html: :width 238px
  [[file:images/11017.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/ex1005.c
// Description : 如果用 'ary_set (&a[2], 2, 99)' 调用 list 10-11(chap10/list1011.c) 中的 ary_set 函数会怎么样？

#include <stdio.h>

// 将数组 v 的前 n 个元素赋值为 val
void ary_set (int v[], int n, int val)
{
  int i;
  for (i = 0; i < n; i++)
    v[i] = val;
}

int main (void)
{
  int i;
  int a[] = {1, 2, 3, 4, 5};

  ary_set(&a[2], 2, 99);

  for (i = 0; i < 5; i++)
    printf("a[%d] = %d\n", i, a[i]);

  return 0;
}
#+end_src
** 总结
+ *总结：*
  #+attr_html: :width 238px
  [[file:images/11018.png]]
#+begin_src C
//     Charset : UTF-8(LF)
//   File Name : chap10/summary.c
// Description : 总结

#include <stdio.h>

#define NUMBER 5                // 人数

// 交换 px 和 py 所指对象的值
void swap (int *px, int *py)
{
  int tmp = *px;
  ,*px = *py;
  ,*py = tmp;
}

// 冒泡排序
void bsort (int a[], int n)
{
  int i, j;

  for (i = 0; i < n -1; i++) {
    for (j = 0; j < n - i -1; j++) {
      if (a[j] > a[j + 1])
        swap(&a[j], &a[j + 1]);
    }
  }
}

int main (void)
{

  int i;
  int point[NUMBER];            // NUMBER 名学生的分数

  printf("请输入 %d 人的分数：\n", NUMBER);
  for (i = 0; i < NUMBER; i++) {
    printf("%2d 号：", i + 1);
    scanf("%d", &point[i]);
  }

  bsort(point, NUMBER);         // 排序

  puts("按升序排序后：");
  for (i = 0; i < NUMBER; i++)
    printf("%2d 号：%d\n", i + 1, point[i]);

  return 0;
}
#+end_src
